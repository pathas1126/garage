{"version":3,"sources":["store/LoginProvider.jsx","components/Footer/Footer.jsx","components/Header/Header.jsx","components/Navigation/Navigation.jsx","components/PageTemplate/PageTemplate.jsx","assets/colors/colors.js","components/Button/Button.jsx","components/Input/Input.jsx","components/Card/Card.jsx","components/Loader/Loader.jsx","components/Form/Form.jsx","components/Select/Select.jsx","library/fetchData.js","components/NoticeRow/NoticeRow.jsx","components/Reply/Reply.jsx","components/ContactUs/ContactUs.jsx","assets/keys/index.js","containers/SalesContainer.jsx","containers/CardContainer.jsx","containers/DetailContainer.jsx","containers/SalesHeaderContainer.jsx","components/Label/Label.jsx","containers/WriteContainer.jsx","containers/LoginContainer.jsx","containers/SignUpContainer.jsx","containers/MyPageContainer.jsx","containers/MyPagePostsContainer.jsx","containers/NoticeContainer.jsx","containers/NoticeWriteContainer.jsx","containers/NoticeUpdateContainer.jsx","containers/SalesReplyContainer.jsx","containers/SalesReplyReadContainer.jsx","containers/SalesReplyWriteContainer.jsx","containers/ContactContainer.jsx","containers/QnAWriteContainer.jsx","containers/QnAReadContainer.jsx","containers/QnAContainer.jsx","containers/QnAReplyContainer.jsx","containers/QnAReplyWriteContainer.jsx","containers/QnAReplyReadContainer.jsx","components/QnADetail/QnADetail.jsx","components/QnA/QnA.jsx","components/QnAReply/QnAReply.jsx","components/Detail/Detail.jsx","components/UserTable/UserTable.jsx","pages/SalesPage.jsx","pages/NoticePage.jsx","pages/NoticeWritePage.jsx","pages/QnAPage.jsx","pages/LoginPage.jsx","pages/ContactPage.jsx","pages/DetailPage.jsx","pages/WritePage.jsx","pages/SingUpPage.jsx","containers/ItemUpdateContainer.jsx","pages/ItemUpdatePage.jsx","pages/MyPage.jsx","pages/MyPagePosts.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["LoginContext","createContext","LoginProvider","children","useState","user_Id","user_Name","logon","admin","value","loginStatus","setLoginStatus","Provider","setStyle","css","Footer","Header","useContext","useEffect","user_Id_this","sessionStorage","getItem","user_Name_this","admin_this","JSON","parse","logon_this","src","alt","to","variation","color","onClick","removeItem","alert","window","location","href","Navigation","PageTemplate","toggleModal","style","height","position","COLORS","primary","secondary","teritiaty","warning","size","width","disabled","SIZES","small","medium","big","VARIATIONS","outline","noborder","defaultStyle","disabledStyle","Button","type","number","file","radio","border","React","memo","placeholder","autoFocus","name","onChange","onBlur","required","id","imageWrapper","bodyStyle","headerStyle","infoStyle","bottomStyle","Card","item_Number","item_Price","item_Writer","item_Sort","item_Detail","item_Name","sales_Contact","sales_KakaoId","deal_Location","item_Picture","slice","borderColor","fontColor","Loader","loaderRef","ref","formWrapper","Form","onSubmit","selectWrapper","Select","length","map","v","i","key","fetchData","method","baseURL","url","data","axios","rowStyle","contentStyle","NoticeRow","notice_Date","notice_Number","notice_Subject","manager_Id","notice_Readcount","notice_Content","setNoticePosts","contentView","setContentView","increaseReadCount","catch","err","then","res","prevPosts","filter","ReplyWrapper","Reply","item_Reply_date","item_Reply_writer","item_Rnumber","setItem_Replies","sameUser","setSameUser","updating","setUpdating","newItem_Detail","setNewItem_Detail","currentUser","confirm","prevReplies","reply","e","preventDefault","target","ContactUsStyle","ContactUs","contactInfo","setContactInfo","user_name","user_email","message","getValues","prevInfo","console","log","emailjs","sendForm","result","error","htmlFor","SalesContainer","items","setItems","page","setPage","lastPage","setLastPage","searching","setSearching","searchLoading","setSearchLoading","useRef","resArr","maxPage","prevItems","concat","loaderCurrent","current","observer","IntersectionObserver","entries","forEach","entry","timer","isIntersecting","setTimeout","prevPage","observe","unobserve","flexWrap","display","justifyContent","textAlign","flexDirection","alignItems","marginBottom","scrollTo","top","CardContainer","DetailContainer","item_Id","item","setItem","loading","setLoading","item_Replies","itemDetail","itemReply","prevItem","item_Date","SalesHeaderWrapper","searchWrapper","SalesHeaderContainer","searchText","searchType","searchData","setSearchData","labelStyle","fileStyle","Label","WriteContainerWrapper","post","setPost","fileName","filePath","uploadedImg","setUploadedImg","setValues","trim","test","date","Date","now","getFullYear","getMonth","getDate","toString","colSpan","imgFile","files","formData","FormData","append","loginWrapper","LoginContainer","user_Id_FF","user_Password_FF","loginInfo","setLoginInfo","getInputValue","fontSize","success","userName","history","go","msg","SignUpContainer","user_Password","user_Password_check","user_Email","signUp","setSignUp","MyPageContainer","userData","setUserData","user_Id_logon","MyPagePostsContainer","margin","textDecoration","footerStyle","NoticeContainer","noticePosts","pageArray","setPageArray","prevPageArray","NoticeWriteContainer","noticePost","setNoticePost","prevPost","NoticeUpdateContainer","SalesReplyContainer","SalesReplyReadContainer","sort","a","b","ReplyWriteWrapper","SalesReplyWriteContainer","replyData","setReplyData","ContactWrapper","ContactContainer","sectionWrapper","formStyle","QnAWriteContainer","qna","setQna","qna_Number","qna_Writer","qna_Password","qna_Subject","qna_Content","qna_Date","qnaData","setQnaData","haveSession","setHaveSession","qna_Writer_Fixed","setQna_Writer_Fixed","prevQna","sessionName","QnAReadContainer","totalPages","setTotalPages","tmpTotalpages","push","prevTotal","QnAContainer","QnAReplyContainer","qnaReplies","setQnaReplies","QnAReplyWriteStyle","QnAReplyWriteContainer","qna_Rnumber","qna_Name","qna_Detail","qna_Reply_date","qnaReplyData","setQnaReplyData","prevData","QnAReplyReadContainer","QnADetailStyle","pStyle","buttonWrapper","QnADetail","newContent","setNewContent","prevContent","setPrevContent","QnAWrapperStyle","headerRightWrapper","QnA","unlocked","setUnlocked","showInput","setShowInput","password","setPassword","setAdmin","QnAReplyStyle","adminStyle","QnAReply","onRemove","detailWrapperStyle","detailStyle","Detail","props","userTableWrapper","tableWrapper","footerWrapper","UserTable","SalesPage","NoticePage","NoticeWritePage","match","params","QnAPage","LoginPage","ContactPage","DetailPage","WritePage","SingUpPage","ItemUpdateContainer","prevImg","ItemUpdatePage","MyPage","MyPagePosts","App","styles","exact","path","component","SignUpPage","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7296b36b.chunk.js","sourcesContent":["import React, { createContext, useState } from \"react\";\r\n\r\nconst LoginContext = createContext();\r\n\r\nexport const LoginProvider = ({ children }) => {\r\n  const [loginStatus, setLoginStatus] = useState({\r\n    user_Id: \"\",\r\n    user_Name: \"\",\r\n    logon: false,\r\n    admin: false,\r\n  });\r\n\r\n  const value = {\r\n    loginStatus,\r\n    setLoginStatus,\r\n  };\r\n\r\n  return (\r\n    <LoginContext.Provider value={value}>{children}</LoginContext.Provider>\r\n  );\r\n};\r\n\r\nexport default LoginContext;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer css={setStyle()}>\r\n      <h1>GARAGE_935</h1>\r\n      <h4>KIC TEAM PROJECT</h4>\r\n    </footer>\r\n  );\r\n};\r\n\r\nconst setStyle = () => {\r\n  const defaultStyle = css`\r\n    width: 100%;\r\n    height: 8rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background: black;\r\n    h1,\r\n    h4 {\r\n      margin: 0;\r\n      color: white;\r\n    }\r\n  `;\r\n  return [defaultStyle];\r\n};\r\n\r\nexport default Footer;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { Button } from \"../index\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useEffect, useContext } from \"react\";\r\nimport { LoginContext } from \"../../store\";\r\n\r\nconst Header = () => {\r\n  const { loginStatus, setLoginStatus } = useContext(LoginContext);\r\n  const { logon, admin } = loginStatus;\r\n\r\n  useEffect(() => {\r\n    const user_Id_this = sessionStorage.getItem(\"user_Id\");\r\n    const user_Name_this = sessionStorage.getItem(\"user_Name\");\r\n    const admin_this = JSON.parse(sessionStorage.getItem(\"admin\"));\r\n    const logon_this = JSON.parse(sessionStorage.getItem(\"logon\"));\r\n\r\n    setLoginStatus({\r\n      user_Id: user_Id_this,\r\n      user_Name: user_Name_this,\r\n      logon: logon_this,\r\n      admin: admin_this,\r\n    });\r\n  }, [setLoginStatus]);\r\n\r\n  const logout = () => {\r\n    setLoginStatus({ user_Id: \"\", logon: false });\r\n    sessionStorage.removeItem(\"user_Id\");\r\n    sessionStorage.removeItem(\"user_Name\");\r\n    sessionStorage.removeItem(\"logon\");\r\n    sessionStorage.removeItem(\"admin\");\r\n    alert(\"로그아웃 되었습니다.\");\r\n    window.location.href = \"/\";\r\n  };\r\n\r\n  return (\r\n    <header css={setStyle()}>\r\n      <img src=\"/images/header1.jpg\" alt=\"상단 이미지\" />\r\n      <section>\r\n        {admin && <span>관리자 로그인 중...</span>}\r\n        {!logon && (\r\n          <Link to=\"/login\">\r\n            <Button variation=\"noborder\" color=\"secondary\">\r\n              Login\r\n            </Button>\r\n          </Link>\r\n        )}\r\n        {logon && (\r\n          <Button variation=\"noborder\" color=\"secondary\" onClick={logout}>\r\n            Logout\r\n          </Button>\r\n        )}\r\n\r\n        {logon && !admin && (\r\n          <Link to=\"/mypage\">\r\n            <Button variation=\"noborder\" color=\"secondary\">\r\n              MyPage\r\n            </Button>\r\n          </Link>\r\n        )}\r\n\r\n        {!admin && (\r\n          <Link to=\"/contact\">\r\n            <Button variation=\"noborder\" color=\"secondary\">\r\n              Contact\r\n            </Button>\r\n          </Link>\r\n        )}\r\n      </section>\r\n      <Link to=\"/\">\r\n        <h1>GARAGE</h1>\r\n      </Link>\r\n    </header>\r\n  );\r\n};\r\n\r\nconst setStyle = () => {\r\n  const defaultStyle = css`\r\n    position: relative;\r\n    width: 100%;\r\n    height: 28rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    img {\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      width: 100%;\r\n      height: 28rem;\r\n      z-index: -99;\r\n    }\r\n\r\n    section {\r\n      position: absolute;\r\n      top: 0;\r\n      right: 0;\r\n      margin-right: 2rem;\r\n      color: white;\r\n      a {\r\n        text-decoration: none;\r\n      }\r\n    }\r\n\r\n    h1 {\r\n      margin: 0;\r\n      color: #cdcdcd;\r\n      position: absolute;\r\n      top: 0;\r\n      left: 1rem;\r\n      cursor: pointer;\r\n      &:active {\r\n        color: #dedede;\r\n      }\r\n    }\r\n  `;\r\n  return [defaultStyle];\r\n};\r\n\r\nexport default Header;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"../index\";\r\n\r\nconst Navigation = () => {\r\n  return (\r\n    <nav css={setStyle()}>\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/sales\">\r\n            <Button variation=\"noborder\" color=\"teritiaty\">\r\n              SALES\r\n            </Button>\r\n          </Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/notice\">\r\n            <Button variation=\"noborder\" color=\"teritiaty\">\r\n              NOTICE\r\n            </Button>\r\n          </Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/qna\">\r\n            <Button variation=\"noborder\" color=\"teritiaty\">\r\n              QnA\r\n            </Button>\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nconst setStyle = () => {\r\n  const defaultStyle = css`\r\n    margin: 0 auto;\r\n    width: 99%;\r\n    height: 3.5rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background: transparent;\r\n    border-bottom: 1px solid #dedede;\r\n    z-index: 11;\r\n    ul {\r\n      width: 80%;\r\n      list-style: none;\r\n      display: flex;\r\n      flex-direction: row;\r\n      align-items: center;\r\n      justify-content: space-around;\r\n      a {\r\n        text-decoration: none;\r\n      }\r\n    }\r\n    button {\r\n      font-weight: 600;\r\n    }\r\n  `;\r\n  return [defaultStyle];\r\n};\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\nimport { Header, Footer, Navigation } from \"../index\";\r\n\r\nconst PageTemplate = ({ children }) => {\r\n  return (\r\n    <>\r\n      <Header toggleModal />\r\n      <Navigation />\r\n      <section style={{ height: \"100%\", position: \"relative\" }}>\r\n        {children}\r\n      </section>\r\n      <Footer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PageTemplate;\r\n","const COLORS = {\r\n  primary: \"#774836\",\r\n  secondary: \"#82363A\",\r\n  teritiaty: \"#2E2A39\",\r\n  warning: \"#d63031\",\r\n};\r\n\r\nexport default COLORS;\r\n","/**  @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport PropTypes from \"prop-types\";\r\nimport { COLORS } from \"../../assets/colors\";\r\n\r\n// 버튼 컴포넌트\r\nconst Button = ({\r\n  children,\r\n  onClick,\r\n  color = \"primary\",\r\n  size = \"medium\",\r\n  variation,\r\n  width,\r\n  type = \"button\",\r\n  disabled,\r\n}) => {\r\n  return (\r\n    <button\r\n      css={setStyle({ color, size, variation, width, disabled })}\r\n      type={type}\r\n      onClick={onClick}\r\n      disabled={disabled}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\n// 스타일 설정 함수\r\nconst setStyle = ({ color, size, variation, width, disabled }) => {\r\n  // 사이즈 객체\r\n  const SIZES = {\r\n    small: css`\r\n      padding: 0 0.5rem;\r\n      height: 2rem;\r\n      font-size: 0.4rem;\r\n    `,\r\n    medium: css`\r\n      padding: 0 1rem;\r\n      height: 3rem;\r\n      font-size: 0.8rem;\r\n    `,\r\n    big: css`\r\n      padding: 0 1.4rem;\r\n      height: 4rem;\r\n      font-size: 1.2rem;\r\n    `,\r\n  };\r\n\r\n  // 변형 스타일 객체\r\n  const VARIATIONS = {\r\n    outline: css`\r\n      border: 1px solid ${COLORS[color]};\r\n      color: ${COLORS[color]};\r\n      background: transparent;\r\n      &:active {\r\n        background: ${COLORS[color]};\r\n        color: white;\r\n        transition: 0.4s;\r\n      }\r\n    `,\r\n    noborder: css`\r\n      border: none;\r\n      color: ${COLORS[color]};\r\n      background: transparent;\r\n      &:active {\r\n        background: ${COLORS[color]};\r\n        color: white;\r\n        transition: 0.4s;\r\n      }\r\n    `,\r\n  };\r\n\r\n  // 기본 스타일\r\n  const defaultStyle = css`\r\n    display: inline-flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    box-sizing: border-box;\r\n    padding: 0.4rem;\r\n    background: ${COLORS[color]};\r\n    border: none;\r\n    color: white;\r\n    font-size: 1.3rem;\r\n    border-radius: 0.5rem;\r\n    outline: none;\r\n    cursor: pointer;\r\n\r\n    /* 버튼 클리 시 스타일 */\r\n    &:active {\r\n      transform: scale(0.98);\r\n      box-shadow: 0 0 1px 1px rgba(255, 255, 255, 0.12),\r\n        0 0 2px 2px rgba(255, 255, 255, 0.12),\r\n        0 0 4px 4px rgba(255, 255, 255, 0.12);\r\n    }\r\n\r\n    & + button {\r\n      margin-left: 3rem;\r\n    }\r\n  `;\r\n\r\n  const disabledStyle = css`\r\n    cursor: default;\r\n  `;\r\n  // width는 인라인으로 직접 적용하는 것이기 때문에 객체로 리턴\r\n  return [\r\n    defaultStyle,\r\n    SIZES[size],\r\n    VARIATIONS[variation],\r\n    { width },\r\n    disabled && disabledStyle,\r\n  ];\r\n};\r\n\r\n// 버튼 컴포넌트에서 받는 Props 관리\r\n// isRequired는 필수 입력 사항으로, 미입력 시 에러 발생\r\nButton.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  onClick: PropTypes.func,\r\n  color: PropTypes.string,\r\n  size: PropTypes.string,\r\n  variation: PropTypes.string,\r\n  width: PropTypes.string,\r\n};\r\n\r\nexport default Button;\r\n","/**@jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport React from \"react\";\r\n\r\nconst Input = ({\r\n  placeholder,\r\n  width,\r\n  autoFocus,\r\n  name,\r\n  value,\r\n  onChange,\r\n  onBlur,\r\n  type = \"text\",\r\n  required = false,\r\n  noborder,\r\n}) => {\r\n  return (\r\n    <input\r\n      id={name}\r\n      type={type}\r\n      css={setStyle({ type, width, noborder })}\r\n      name={name}\r\n      value={value}\r\n      placeholder={placeholder}\r\n      autoFocus={autoFocus}\r\n      onChange={onChange}\r\n      onBlur={onBlur}\r\n      required={required}\r\n    ></input>\r\n  );\r\n};\r\n\r\nconst setStyle = ({ type, width, noborder }) => {\r\n  const defaultStyle = css`\r\n    padding: 0.8rem 0 0.2rem 0;\r\n    width: 12rem;\r\n    height: 1.4rem;\r\n    border: none;\r\n    border-bottom: 1px solid #0c0c0c;\r\n    outline: none;\r\n    &:focus {\r\n      transform: scale(1.05);\r\n      transition: 0.1s ease-out;\r\n    }\r\n    & + & {\r\n      margin-top: 1rem;\r\n    }\r\n  `;\r\n\r\n  const TYPES = {\r\n    number: css`\r\n      outline: none;\r\n      ::-webkit-outer-spin-button,\r\n      ::-webkit-inner-spin-button {\r\n        -webkit-appearance: none;\r\n      }\r\n    `,\r\n    file: css`\r\n      display: none;\r\n    `,\r\n    radio: css`\r\n      width: 1rem;\r\n    `,\r\n  };\r\n\r\n  return [defaultStyle, TYPES[type], { width }, noborder && { border: \"none\" }];\r\n};\r\nexport default React.memo(Input);\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button } from \"../\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { COLORS } from \"../../assets/colors\";\r\n\r\nconst Card = ({\r\n  item_Number,\r\n  user_Id,\r\n  item_Writer,\r\n  item_Sort,\r\n  item_Price,\r\n  item_Detail,\r\n  sales_Contact,\r\n  sales_KakaoId,\r\n  deal_Location,\r\n  item_Name,\r\n  item_Picture,\r\n  onClick,\r\n}) => {\r\n  return (\r\n    <section css={defaultStyle}>\r\n      <div css={[imageWrapper]}>\r\n        <img\r\n          src={item_Picture}\r\n          alt=\"상품 설명 이미지\"\r\n          width=\"100%\"\r\n          height=\"100%\"\r\n        />\r\n      </div>\r\n      <article css={bodyStyle}>\r\n        <div css={headerStyle}>\r\n          <h1>{item_Name}</h1>\r\n        </div>\r\n        <div css={infoStyle}>\r\n          <fieldset>\r\n            <legend>본문 내용</legend>\r\n            <p>{item_Detail && item_Detail.slice(0, 80)}...</p>\r\n          </fieldset>\r\n        </div>\r\n        <div css={bottomStyle}>\r\n          <span>{item_Price}</span>\r\n          <Link to={`/sales/detail/${item_Number}`}>\r\n            <Button variation=\"noborder\">더 보기</Button>\r\n          </Link>\r\n        </div>\r\n      </article>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst defaultStyle = css`\r\n  margin: 0.8rem;\r\n  width: 21rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  position: relative;\r\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.25);\r\n  &:hover {\r\n    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.7);\r\n    transition: 0.3s;\r\n  }\r\n`;\r\n\r\nconst imageWrapper = css`\r\n  width: 100%;\r\n  height: 18rem;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst bodyStyle = css`\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst headerStyle = css`\r\n  width: 95%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  h1 {\r\n    margin: 0.5rem;\r\n    font-size: 1.6rem;\r\n    font-weight: 400;\r\n  }\r\n  span {\r\n    background: ${COLORS.secondary};\r\n    padding: 0.4rem;\r\n    margin-right: 0.5rem;\r\n    border-radius: 0.2rem;\r\n    color: white;\r\n  }\r\n`;\r\n\r\nconst infoStyle = css`\r\n  width: 90%;\r\n  fieldset {\r\n    border: 1px solid ${COLORS.secondary};\r\n  }\r\n  fieldset > legend {\r\n    padding: 0.2rem;\r\n    margin-right: 0.5rem;\r\n    color: ${COLORS.secondary};\r\n  }\r\n  p {\r\n    margin: 0.4rem 0 0 0;\r\n  }\r\n`;\r\n\r\nconst bottomStyle = css`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  span {\r\n    text-indent: 1.1rem;\r\n  }\r\n  a {\r\n    text-decoration: none;\r\n  }\r\n`;\r\n\r\nCard.propTypes = {\r\n  item_Number: PropTypes.number.isRequired,\r\n  user_Id: PropTypes.string.isRequired,\r\n  item_Writer: PropTypes.string.isRequired,\r\n  item_Sort: PropTypes.string.isRequired,\r\n  item_Price: PropTypes.string.isRequired,\r\n  item_Detail: PropTypes.string.isRequired,\r\n  sales_Contact: PropTypes.string.isRequired,\r\n  sales_KakaoId: PropTypes.string.isRequired,\r\n  deal_Location: PropTypes.string.isRequired,\r\n  item_Name: PropTypes.string.isRequired,\r\n  item_Picture: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Card;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { COLORS } from \"../../assets/colors\";\r\n\r\nconst Loader = ({\r\n  borderColor = \"primary\",\r\n  fontColor = \"primary\",\r\n  loaderRef,\r\n}) => {\r\n  return (\r\n    <div css={style(borderColor, fontColor)} ref={loaderRef}>\r\n      <div></div>\r\n      <div>LOADING</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst style = (borderColor, fontColor) => css`\r\n  margin: 10rem auto;\r\n  &,\r\n  div {\r\n    position: relative;\r\n    padding: 0;\r\n    width: 8rem;\r\n    height: 8rem;\r\n    border-radius: 100%;\r\n    box-sizing: border-box;\r\n  }\r\n  & > div:first-of-type {\r\n    border: 3px solid transparent;\r\n    border-color: transparent ${COLORS[borderColor]};\r\n    animation: rotate-loading 1.5s linear 0s infinite normal;\r\n    transform-origin: 50% 50%;\r\n  }\r\n  & > div + div {\r\n    position: absolute;\r\n    top: 54px;\r\n    text-align: center;\r\n    font-size: 15px;\r\n    color: ${COLORS[fontColor]};\r\n    opacity: 0;\r\n    animation: loading-text-opacity 2s linear 0s infinite normal;\r\n  }\r\n  &:hover {\r\n    div:first-of-type {\r\n      border-color: transparent ${COLORS[fontColor]};\r\n    }\r\n  }\r\n  &:hover {\r\n    &,\r\n    & div {\r\n      transition: all 0.5s ease-in-out;\r\n    }\r\n  }\r\n\r\n  @keyframes rotate-loading {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n\r\n  @keyframes loading-text-opacity {\r\n    0% {\r\n      opacity: 0.4;\r\n    }\r\n    25% {\r\n      opacity: 0;\r\n    }\r\n    75% {\r\n      opacity: 1;\r\n    }\r\n    100% {\r\n      opacity: 0.4;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Loader;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\n\r\nconst Form = ({ children, onSubmit }) => {\r\n  return (\r\n    <form css={formWrapper} onSubmit={onSubmit}>\r\n      {children}\r\n    </form>\r\n  );\r\n};\r\n\r\nconst formWrapper = css`\r\n  width: 100%;\r\n  margin-bottom: 1rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  textarea {\r\n    margin: 2rem 0;\r\n    padding: 1rem;\r\n    width: 90%;\r\n    height: 14rem;\r\n    box-sizing: border-box;\r\n    border: 1px solid black;\r\n    border-radius: 0.2rem;\r\n    resize: none;\r\n  }\r\n  td > button {\r\n    margin-top: 1rem;\r\n  }\r\n`;\r\n\r\nexport default Form;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport propTypes from \"prop-types\";\r\n\r\nconst Select = ({ value, name, onChange, width }) => {\r\n  return (\r\n    <select\r\n      onChange={onChange}\r\n      name={name}\r\n      id={name}\r\n      css={[selectWrapper, width && { width }]}\r\n    >\r\n      {value.length > 0 &&\r\n        value.map((v, i) => (\r\n          <option value={v} key={i}>\r\n            {v}\r\n          </option>\r\n        ))}\r\n    </select>\r\n  );\r\n};\r\n\r\nconst selectWrapper = css`\r\n  margin: 0.5rem 0;\r\n  padding: 0.2rem;\r\n  outline: none;\r\n  width: 80%;\r\n  &:hover {\r\n    transform: scale(1.02);\r\n  }\r\n`;\r\n\r\nSelect.propTypes = {\r\n  value: propTypes.array.isRequired,\r\n};\r\n\r\nexport default Select;\r\n","import axios from \"axios\";\r\n\r\nexport const fetchData = ({\r\n  method,\r\n  baseURL = \"http://localhost:4000\",\r\n  url,\r\n  data,\r\n}) => axios({ method, baseURL, url, data });\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { COLORS } from \"../../assets/colors\";\r\nimport { Button } from \"../Button\";\r\nimport { Fragment, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { fetchData } from \"../../library\";\r\n\r\nconst NoticeRow = ({\r\n  notice_Date,\r\n  notice_Number,\r\n  notice_Subject,\r\n  manager_Id,\r\n  notice_Readcount,\r\n  notice_Content,\r\n  admin,\r\n  setNoticePosts,\r\n}) => {\r\n  const [contentView, setContentView] = useState(false);\r\n\r\n  // 공지사항 세부 내용 조회\r\n  const getContent = () => {\r\n    if (!JSON.parse(sessionStorage.getItem(\"admin\"))) increaseReadCount();\r\n    setContentView(!contentView);\r\n  };\r\n\r\n  // 조회수 증가 함수\r\n  const increaseReadCount = () => {\r\n    fetchData({\r\n      method: \"POST\",\r\n      url: \"/notice/readcount\",\r\n      data: { notice_Number, notice_Readcount },\r\n    }).catch((err) => {\r\n      throw err;\r\n    });\r\n  };\r\n\r\n  // 공지 삭제 함수\r\n  const removeNotice = () => {\r\n    fetchData({\r\n      method: \"POST\",\r\n      url: \"/notice/d\",\r\n      data: { notice_Number },\r\n    })\r\n      .then((res) => {\r\n        if (res.data) {\r\n          setNoticePosts((prevPosts) =>\r\n            prevPosts.filter((v) => v.notice_Number !== notice_Number)\r\n          );\r\n          alert(\"글이 정상적으로 삭제되었습니다.\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        throw err;\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <tr css={rowStyle}>\r\n        <td>\r\n          <h3 onClick={getContent}>{notice_Subject}</h3>\r\n        </td>\r\n        <td>\r\n          <span>조회수: {notice_Readcount}</span>\r\n          <span>{notice_Date.slice(0, 10)}</span>\r\n          <span>{manager_Id}</span>\r\n          {admin && (\r\n            <Fragment>\r\n              <Link to={`/notice/update/${notice_Number}`}>\r\n                <Button variation=\"outline\" color=\"secondary\">\r\n                  수정\r\n                </Button>\r\n              </Link>\r\n              <Button\r\n                variation=\"outline\"\r\n                color=\"warning\"\r\n                onClick={removeNotice}\r\n              >\r\n                삭제\r\n              </Button>\r\n            </Fragment>\r\n          )}\r\n        </td>\r\n      </tr>\r\n      {contentView && (\r\n        <tr>\r\n          <td css={contentStyle}>\r\n            <p>{notice_Content}</p>\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nconst rowStyle = css`\r\n  margin: 0 auto;\r\n  margin-top: 1rem;\r\n  padding: 2rem 1rem;\r\n  width: 90%;\r\n  height: 1rem;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  border: 1px solid ${COLORS.primary};\r\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.25);\r\n  &:hover {\r\n    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.7);\r\n    transition: 0.3s;\r\n  }\r\n  h3 {\r\n    cursor: pointer;\r\n  }\r\n  h3:active {\r\n    transform: scale(0.99);\r\n    color: #9c9c9c;\r\n  }\r\n\r\n  span + span {\r\n    margin-left: 1rem;\r\n  }\r\n  button {\r\n    margin-left: 3rem;\r\n  }\r\n  a {\r\n    text-decoration: none;\r\n  }\r\n  a + button {\r\n    margin-left: 1rem;\r\n  }\r\n`;\r\n\r\nconst contentStyle = css`\r\n  margin: 0 auto;\r\n  margin-top: -0.1rem;\r\n  padding: 2rem 1rem;\r\n  width: 90%;\r\n  height: 8rem;\r\n  display: block;\r\n  background: #0a3d62;\r\n  color: white;\r\n  border: 1px solid ${COLORS.primary};\r\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.25);\r\n  animation-name: fadeIn;\r\n  animation-duration: 0.3s;\r\n  &:hover {\r\n    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.7);\r\n    transition: 0.3s;\r\n  }\r\n\r\n  @keyframes fadeIn {\r\n    from {\r\n      opacity: 0;\r\n      transform: scaleY(0);\r\n    }\r\n    to {\r\n      opacity: 1;\r\n      transform: scaleY(1);\r\n    }\r\n  }\r\n`;\r\n\r\nexport default NoticeRow;\r\n","/** @jsx jsx */\r\nimport { css, jsx } from \"@emotion/core\";\r\nimport { useState, useEffect, Fragment } from \"react\";\r\nimport { AiOutlineClose } from \"react-icons/ai\";\r\nimport { BsPencilSquare } from \"react-icons/bs\";\r\nimport { fetchData } from \"../../library\";\r\nimport { Button } from \"../index\";\r\n\r\nconst Reply = ({\r\n  item_Detail,\r\n  item_Number,\r\n  item_Reply_date,\r\n  item_Reply_writer,\r\n  item_Rnumber,\r\n  setItem_Replies,\r\n}) => {\r\n  const [sameUser, setSameUser] = useState(false);\r\n\r\n  const [updating, setUpdating] = useState(false);\r\n\r\n  const [newItem_Detail, setNewItem_Detail] = useState(item_Detail);\r\n\r\n  const getValues = (e) => {\r\n    const { value } = e.target;\r\n    setNewItem_Detail(value);\r\n  };\r\n\r\n  const onUpdate = () => {\r\n    setUpdating(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const currentUser = sessionStorage.getItem(\"user_Name\");\r\n    if (item_Reply_writer === currentUser) {\r\n      setSameUser(true);\r\n    }\r\n  }, [item_Reply_writer]);\r\n\r\n  // 댓글 수정 함수\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    fetchData({\r\n      method: \"PUT\",\r\n      url: \"/sales/detail/upload/reply\",\r\n      data: { item_Detail: newItem_Detail, item_Rnumber },\r\n    })\r\n      .then((res) => {\r\n        setNewItem_Detail(newItem_Detail);\r\n        alert(\"댓글 수정을 완료했습니다.\");\r\n        setUpdating(false);\r\n      })\r\n      .catch((err) => {\r\n        throw err;\r\n      });\r\n  };\r\n\r\n  // 댓글 삭제 함수\r\n  const onRemove = () => {\r\n    if (window.confirm(\"정말로 삭제하시겠습니까?\"))\r\n      fetchData({\r\n        method: \"POST\",\r\n        url: `/sales/detail/item/${item_Rnumber}`,\r\n      })\r\n        .then((res) => {\r\n          if (res.data) {\r\n            setItem_Replies((prevReplies) =>\r\n              prevReplies.filter((reply) => reply.item_Rnumber !== item_Rnumber)\r\n            );\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          throw err;\r\n        });\r\n  };\r\n\r\n  return (\r\n    <article css={ReplyWrapper}>\r\n      <header>\r\n        <span> {item_Reply_writer}</span>\r\n        {sameUser && (\r\n          <div>\r\n            <span onClick={onUpdate}>\r\n              <BsPencilSquare />\r\n            </span>\r\n            <span onClick={onRemove}>\r\n              <AiOutlineClose />\r\n            </span>\r\n          </div>\r\n        )}\r\n      </header>\r\n      {!updating ? (\r\n        <Fragment>\r\n          <p>{newItem_Detail}</p>\r\n          <footer>\r\n            <span>{item_Reply_date}</span>\r\n          </footer>\r\n        </Fragment>\r\n      ) : (\r\n        <form onSubmit={onSubmit}>\r\n          <textarea\r\n            name=\"newItem_Detail\"\r\n            value={newItem_Detail}\r\n            onChange={getValues}\r\n          ></textarea>\r\n          <div>\r\n            <Button\r\n              variation=\"noborder\"\r\n              size=\"small\"\r\n              color=\"teritiaty\"\r\n              onClick={() => {\r\n                setNewItem_Detail(item_Detail);\r\n                setUpdating(false);\r\n              }}\r\n            >\r\n              취소\r\n            </Button>\r\n            <Button\r\n              variation=\"noborder\"\r\n              size=\"small\"\r\n              type=\"submit\"\r\n              color=\"teritiaty\"\r\n            >\r\n              수정 완료\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      )}\r\n    </article>\r\n  );\r\n};\r\n\r\nconst ReplyWrapper = css`\r\n  width: 93%;\r\n  margin: 0 auto;\r\n  padding: 1rem;\r\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.12);\r\n\r\n  header {\r\n    font-size: 0.9rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    & > span {\r\n      font-weight: 600;\r\n    }\r\n    div > span {\r\n      cursor: pointer;\r\n      & + span {\r\n        margin-left: 1rem;\r\n      }\r\n      &:hover {\r\n        color: #006266;\r\n      }\r\n      &:active {\r\n        color: red;\r\n      }\r\n    }\r\n  }\r\n  footer {\r\n    text-align: right;\r\n    font-size: 0.8rem;\r\n  }\r\n\r\n  form {\r\n    margin: 1rem auto;\r\n    position: relative;\r\n    width: 99%;\r\n    textarea {\r\n      width: 98.5%;\r\n      height: 4rem;\r\n      resize: none;\r\n    }\r\n    div {\r\n      position: absolute;\r\n      bottom: -1.8rem;\r\n      right: 0;\r\n      button {\r\n        font-size: 0.8rem;\r\n        & + button {\r\n          margin-left: 1rem;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  p {\r\n    font-size: 0.9rem;\r\n  }\r\n`;\r\nexport default Reply;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport emailjs from \"emailjs-com\";\r\nimport { SERVICE_ID, TEMPLATE_ID, EMAILJS_KEY } from \"../../assets/keys\";\r\nimport { Input, Button } from \"../index\";\r\n\r\nconst ContactUs = ({ contactInfo, setContactInfo }) => {\r\n  const { user_name, user_email, message } = contactInfo;\r\n\r\n  // 인풋 값 가져오는 함수\r\n  const getValues = (e) => {\r\n    const { name, value } = e.target;\r\n    setContactInfo((prevInfo) => ({\r\n      ...prevInfo,\r\n      [name]: value,\r\n    }));\r\n  };\r\n  // 이메일 전송 함수\r\n  const sendEmail = (e) => {\r\n    e.preventDefault();\r\n\r\n    console.log(e.target);\r\n    emailjs.sendForm(SERVICE_ID, TEMPLATE_ID, e.target, EMAILJS_KEY).then(\r\n      (result) => {\r\n        setContactInfo({\r\n          user_name: \"\",\r\n          user_email: \"\",\r\n          message: \"\",\r\n        });\r\n        alert(\"성공적으로 메일을 보냈습니다.\");\r\n      },\r\n      (error) => {\r\n        alert(\"메일을 보낼 수 없습니다.\");\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <section css={ContactUsStyle}>\r\n      <h1>Contact US</h1>\r\n      <form onSubmit={sendEmail}>\r\n        <input type=\"hidden\" name=\"contact_number\" />\r\n        <div>\r\n          <label htmlFor=\"user_name\">Name</label>\r\n          <Input\r\n            type=\"text\"\r\n            name=\"user_name\"\r\n            onChange={getValues}\r\n            value={user_name}\r\n            autoFocus\r\n            required\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"user_email\">Email</label>\r\n          <Input\r\n            type=\"email\"\r\n            onChange={getValues}\r\n            name=\"user_email\"\r\n            value={user_email}\r\n            required\r\n          />\r\n        </div>\r\n        <label htmlFor=\"message\">Message</label>\r\n        <textarea\r\n          onChange={getValues}\r\n          value={message}\r\n          name=\"message\"\r\n          id=\"message\"\r\n          required\r\n        />\r\n        <Button\r\n          variation=\"outline\"\r\n          color=\"teritiaty\"\r\n          width=\"100%\"\r\n          type=\"submit\"\r\n        >\r\n          보내기\r\n        </Button>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst ContactUsStyle = css`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  h1 {\r\n    font-size: 1.3rem;\r\n    margin-bottom: 0;\r\n  }\r\n\r\n  form {\r\n    margin: 2rem auto;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    div > label {\r\n      display: inline-block;\r\n      width: 3rem;\r\n      margin-right: 1rem;\r\n    }\r\n    div + label {\r\n      margin-top: 1.5rem;\r\n    }\r\n    textarea {\r\n      margin-top: 1rem;\r\n      margin-bottom: 1.8rem;\r\n      display: inline-block;\r\n      width: 100%;\r\n      height: 10rem;\r\n      resize: none;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default ContactUs;\r\n","export const SERVICE_ID = \"garage\";\r\n\r\nexport const TEMPLATE_ID = \"template_rCbtRrkt\";\r\n\r\nexport const EMAILJS_KEY = \"user_Cxb9EVWOO8kuTXydlKaKP\";\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { fetchData } from \"../library\";\r\nimport { CardContainer } from \"./index\";\r\nimport { Loader, Button } from \"../components\";\r\nimport { SalesHeaderContainer } from \"./index\";\r\n\r\nconst SalesContainer = () => {\r\n  const [items, setItems] = useState([]);\r\n  const [page, setPage] = useState(0);\r\n  const [lastPage, setLastPage] = useState(2);\r\n  const [searching, setSearching] = useState(false);\r\n  const [searchLoading, setSearchLoading] = useState(false);\r\n\r\n  const loaderRef = useRef();\r\n\r\n  // page에 따라 상품 리스트 요청\r\n  useEffect(() => {\r\n    if (searching) return;\r\n    fetchData({ method: \"GET\", url: `/sales/items?page=${page}` })\r\n      .then((data) => {\r\n        const {\r\n          data: { resArr, maxPage },\r\n        } = data;\r\n        if (resArr.length > 0) {\r\n          setLastPage(maxPage);\r\n          setItems((prevItems) => prevItems.concat(resArr));\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        throw err;\r\n      });\r\n  }, [page, searching]);\r\n\r\n  // Loader 컴포넌트에 Intersetion Observer 연결\r\n  useEffect(() => {\r\n    const loaderCurrent = loaderRef.current;\r\n    const observer = new IntersectionObserver((entries) => {\r\n      entries.forEach((entry) => {\r\n        if (entry.isIntersecting) {\r\n          let timer;\r\n          if (!timer) {\r\n            timer = setTimeout(() => {\r\n              setPage((prevPage) => prevPage + 1);\r\n            }, 300);\r\n          }\r\n        }\r\n      });\r\n    });\r\n    if (loaderCurrent) {\r\n      observer.observe(loaderCurrent);\r\n    }\r\n    return () => observer.unobserve(loaderCurrent);\r\n  }, []);\r\n\r\n  return (\r\n    <section\r\n      style={{\r\n        width: \"100%\",\r\n        flexWrap: \"wrap\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n      }}\r\n    >\r\n      <SalesHeaderContainer\r\n        setItems={setItems}\r\n        setSearching={setSearching}\r\n        setSearchLoading={setSearchLoading}\r\n      />\r\n      {!searchLoading ? (\r\n        <CardContainer data={items} />\r\n      ) : (\r\n        <Loader borderColor=\"secondary\" fontColor=\"primary\" />\r\n      )}\r\n      <div style={{ width: \"100%\" }}>\r\n        {lastPage === page ? (\r\n          <h1 style={{ textAlign: \"center\" }}>모든 상품을 불러왔습니다.</h1>\r\n        ) : (\r\n          !searching && <Loader loaderRef={loaderRef} />\r\n        )}\r\n\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n            marginBottom: \"4rem\",\r\n          }}\r\n        >\r\n          <Button\r\n            width=\"20rem\"\r\n            color=\"secondary\"\r\n            size=\"big\"\r\n            onClick={() => window.scrollTo({ top: 10 })}\r\n          >\r\n            위로 올라가기\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default SalesContainer;\r\n","import React from \"react\";\r\nimport { Card } from \"../components\";\r\n\r\nconst CardContainer = ({ data }) => {\r\n  return (\r\n    <>\r\n      {data.length > 0 &&\r\n        data.map((v) => (\r\n          <Card\r\n            key={v.item_Number}\r\n            item_Number={v.item_Number}\r\n            user_Id={v.user_Id}\r\n            item_Writer={v.item_Writer}\r\n            item_Sort={v.item_Sort}\r\n            item_Price={v.item_Price}\r\n            item_Detail={v.item_Detail}\r\n            sales_Contact={v.sales_Contact}\r\n            sales_KakaoId={v.sales_KakaoId}\r\n            deal_Location={v.deal_Location}\r\n            item_Name={v.item_Name}\r\n            item_Picture={\r\n              v.item_Picture === \"\" ? \"/images/default.png\" : v.item_Picture\r\n            }\r\n          />\r\n        ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CardContainer;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Detail, Loader } from \"../components\";\r\nimport { fetchData } from \"../library\";\r\n\r\nconst DetailContainer = ({ data, item_Id }) => {\r\n  const [item, setItem] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n  const [item_Replies, setItem_Replies] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    fetchData({\r\n      method: \"GET\",\r\n      url: `/sales/detail/item/${item_Id}`,\r\n    })\r\n      .then((data) => {\r\n        const { itemDetail, itemReply } = data.data;\r\n        setItem_Replies((prevReplies) => itemReply);\r\n        setItem((prevItem) => itemDetail);\r\n        setLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        // 개발용\r\n        alert(\"DB에 같은 아이디로 저장된 문서가 있습니다.\");\r\n        throw err;\r\n      });\r\n  }, [item_Id]);\r\n\r\n  return (\r\n    <>\r\n      {loading && <Loader />}\r\n      {!loading && (\r\n        <Detail\r\n          setItem_Replies={setItem_Replies}\r\n          item_Replies={item_Replies}\r\n          item_Number={item.item_Number}\r\n          user_Id={item.user_Id}\r\n          item_Writer={item.item_Writer}\r\n          item_Sort={item.item_Sort}\r\n          item_Price={item.item_Price}\r\n          item_Detail={item.item_Detail}\r\n          item_Date={item.item_Date}\r\n          sales_Contact={item.sales_Contact}\r\n          sales_KakaoId={item.sales_KakaoId}\r\n          deal_Location={item.deal_Location}\r\n          item_Name={item.item_Name}\r\n          item_Picture={item.item_Picture}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DetailContainer;\r\n","/**@jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { Input, Button, Select } from \"../components\";\r\nimport { useContext, useState } from \"react\";\r\nimport { LoginContext } from \"../store\";\r\nimport { fetchData } from \"../library\";\r\n\r\nconst SalesHeaderContainer = ({ setItems, setSearching, setSearchLoading }) => {\r\n  const [searchData, setSearchData] = useState({\r\n    searchText: \"기타\",\r\n    searchType: \"악기\",\r\n  });\r\n\r\n  const { searchType } = searchData;\r\n\r\n  const { loginStatus } = useContext(LoginContext);\r\n\r\n  const checkLogin = () => {\r\n    if (loginStatus.logon === true) {\r\n      window.location.href = \"/sales/write\";\r\n    } else {\r\n      alert(\"로그인 하셔야 글을 작성하실 수 있습니다.\");\r\n      return (window.location.href = \"/login\");\r\n    }\r\n  };\r\n\r\n  // 인풋 값 가져오는\r\n  const getValues = (e) => {\r\n    const { name, value } = e.target;\r\n    setSearchData({\r\n      ...searchData,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  // 검색 함수\r\n  const onSearch = (e) => {\r\n    e.preventDefault();\r\n    let { searchText, searchType } = searchData;\r\n\r\n    switch (searchType) {\r\n      case \"제목\":\r\n        searchType = \"n\";\r\n        break;\r\n      case \"판매자\":\r\n        searchType = \"s\";\r\n        break;\r\n      case \"악기\":\r\n        searchType = \"m\";\r\n        break;\r\n      default:\r\n        return null;\r\n    }\r\n\r\n    setSearching(true);\r\n    setSearchLoading(true);\r\n\r\n    fetchData({\r\n      url: `/sales/item?searchType=${searchType}&keyword=${searchText}`,\r\n      method: \"GET\",\r\n    })\r\n      .then((res) => {\r\n        if (res.data.length > 0) {\r\n          setItems((prevItems) => res.data);\r\n          setSearchLoading(false);\r\n        } else {\r\n          return alert(\"검색 결과가 없습니다.\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        throw err;\r\n      });\r\n  };\r\n\r\n  return (\r\n    <nav css={SalesHeaderWrapper}>\r\n      <form onSubmit={onSearch} css={searchWrapper}>\r\n        <Select\r\n          name=\"searchType\"\r\n          value={[\"악기\", \"제목\", \"판매자\"]}\r\n          width=\"20%\"\r\n          onChange={getValues}\r\n        ></Select>\r\n        {searchType === \"악기\" ? (\r\n          <Select\r\n            name=\"searchText\"\r\n            value={[\"기타\", \"베이스\", \"드럼\", \"키보드\"]}\r\n            width=\"45%\"\r\n            onChange={getValues}\r\n          ></Select>\r\n        ) : (\r\n          <Input\r\n            onChange={getValues}\r\n            placeholder=\"검색 내용을 입력하세요.\"\r\n            name=\"searchText\"\r\n            width=\"19rem\"\r\n          />\r\n        )}\r\n\r\n        <Button variation=\"noborder\" color=\"secondary\" type=\"submit\">\r\n          검색\r\n        </Button>\r\n      </form>\r\n      <Button variation=\"noborder\" color=\"secondary\" onClick={checkLogin}>\r\n        상품 판매\r\n      </Button>\r\n    </nav>\r\n  );\r\n};\r\n\r\nconst SalesHeaderWrapper = css`\r\n  width: 100%;\r\n  min-width: 30rem;\r\n  margin: 1rem auto;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  a {\r\n    text-decoration: none;\r\n  }\r\n  form + button {\r\n    margin-left: -1rem;\r\n  }\r\n`;\r\n\r\nconst searchWrapper = css`\r\n  width: 40%;\r\n  min-width: 25rem;\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n`;\r\n\r\nexport default SalesHeaderContainer;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { COLORS } from \"../../assets/colors\";\r\n\r\nconst Label = ({ htmlFor, children, file }) => {\r\n  return (\r\n    <label htmlFor={htmlFor} css={[labelStyle, file && fileStyle]}>\r\n      {children}\r\n    </label>\r\n  );\r\n};\r\n\r\nconst labelStyle = css`\r\n  margin-right: 1.5rem;\r\n`;\r\n\r\nconst fileStyle = css`\r\n  display: inline-block;\r\n  padding: 0.25rem 0.4rem;\r\n  background: ${COLORS.secondary};\r\n  color: white;\r\n  border-radius: 0.2rem;\r\n  cursor: pointer;\r\n  &:active {\r\n    transform: scale(0.99);\r\n    box-shadow: inset 0 0 10px #000000;\r\n  }\r\n`;\r\n\r\nexport default Label;\r\n","/**@jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport React, { useState } from \"react\";\r\nimport { Input, Button, Form, Select } from \"../components\";\r\nimport { fetchData } from \"../library\";\r\nimport { COLORS } from \"../assets/colors\";\r\nimport { Label } from \"../components/Label\";\r\n\r\nconst WriteContainer = () => {\r\n  const [post, setPost] = useState({\r\n    item_Name: \"\",\r\n    deal_Location: \"\",\r\n    sales_KakaoId: \"\",\r\n    sales_Contact: \"\",\r\n    item_Price: \"\",\r\n    item_Sort: \"기타\",\r\n    item_Detail: \"\",\r\n    item_Picture: \"\",\r\n  });\r\n\r\n  const {\r\n    item_Name,\r\n    deal_Location,\r\n    sales_KakaoId,\r\n    sales_Contact,\r\n    item_Price,\r\n    item_Detail,\r\n  } = post;\r\n\r\n  const [uploadedImg, setUploadedImg] = useState({\r\n    fileName: \"\",\r\n    filePath: \"\",\r\n  });\r\n\r\n  const setValues = (e) => {\r\n    const { value, name } = e.target;\r\n    setPost({ ...post, [name]: value });\r\n  };\r\n\r\n  const getImage = (e) => {\r\n    const imgFile = e.target.files[0];\r\n\r\n    const imgCheck = /\\.(jpg|png|gif|bmp)$/;\r\n\r\n    if (!imgCheck.test(imgFile.name)) {\r\n      return alert(\"이미지 파일이 아닙니다!\");\r\n    }\r\n    const formData = new FormData();\r\n    formData.append(\"img\", imgFile);\r\n\r\n    fetchData({ method: \"POST\", data: formData, url: \"/sales/image\" }).then(\r\n      (res) => {\r\n        if (res) {\r\n          const { fileName } = res.data;\r\n          setUploadedImg({\r\n            fileName,\r\n            filePath: `/images/${fileName}`,\r\n          });\r\n          setPost({ ...post, item_Picture: `/images/${fileName}` });\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const user_Id = sessionStorage.getItem(\"user_Id\");\r\n    const user_Name = sessionStorage.getItem(\"user_Name\");\r\n\r\n    // 유효성 검사를 위한 정규식\r\n    // 주소: 공백을 포함한 한글\r\n    const locationCheck = /^[가-힣\\s]+$/;\r\n\r\n    // 연락처: 9~11자리 숫자만 입력 가능\r\n    const contactCheck = /^[0-9]{9,11}$/;\r\n\r\n    // 금액: 숫자만 입력 가능\r\n    const priceCheck = /^[0-9]+$/;\r\n\r\n    // 제목 체크\r\n    if (item_Name.trim().length === 0) {\r\n      return alert(\"제목은 1글자 이상 입력해 주세요!\");\r\n    }\r\n\r\n    // 주소는 한글만 입력\r\n    if (!locationCheck.test(deal_Location)) {\r\n      return alert(\"주소는 공백과 한글만 입력 가능합니다. \");\r\n    }\r\n    if (sales_KakaoId.trim().length === 0) {\r\n      return alert(\"카카오톡 ID를 입력해 주세요.\");\r\n    }\r\n    if (!contactCheck.test(sales_Contact)) {\r\n      return alert(\"연락처는 숫자만 입력 가능합니다.\");\r\n    }\r\n    if (!priceCheck.test(item_Price)) {\r\n      return alert(\"금액은 숫자만 입력 가능합니다.\");\r\n    }\r\n    if (item_Detail.trim().length === 0) {\r\n      return alert(\"내용을 입력해주세요\");\r\n    }\r\n\r\n    const data = post;\r\n\r\n    const date = new Date();\r\n\r\n    fetchData({\r\n      method: \"POST\",\r\n      data: {\r\n        ...data,\r\n        user_Id,\r\n        item_Number: Date.now(),\r\n        item_Date: `${date.getFullYear()}-${date.getMonth()}-${date.getDate()} ${date\r\n          .toString()\r\n          .slice(16, 24)}`,\r\n        item_Writer: user_Name,\r\n      },\r\n      url: \"/sales/write\",\r\n    }).then((res) => {\r\n      if (res.data) {\r\n        setPost({\r\n          item_Name: \"\",\r\n          deal_Location: \"\",\r\n          sales_KakaoId: \"\",\r\n          sales_Contact: \"\",\r\n          item_Price: \"\",\r\n          item_Sort: \"\",\r\n          item_Detail: \"\",\r\n          item_Picture: \"\",\r\n        });\r\n        window.location.href = \"/sales\";\r\n        return alert(\"글이 성공적으로 작성되었습니다.\");\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <section css={WriteContainerWrapper}>\r\n      <Form onSubmit={onSubmit}>\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n              <td colSpan=\"2\">\r\n                <Input\r\n                  name=\"item_Name\"\r\n                  width=\"100%\"\r\n                  autoFocus={true}\r\n                  placeholder=\"제목을 입력해 주세요\"\r\n                  value={item_Name}\r\n                  onChange={setValues}\r\n                  required={true}\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"deal_Location\">거래 위치</Label>\r\n              </td>\r\n              <td>\r\n                <Input\r\n                  name=\"deal_Location\"\r\n                  placeholder=\"한글/공백 입력 가능\"\r\n                  value={deal_Location}\r\n                  onChange={setValues}\r\n                  required={true}\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"sales_Contact\">연락처</Label>\r\n              </td>\r\n              <td>\r\n                <Input\r\n                  name=\"sales_Contact\"\r\n                  placeholder=\"숫자만 입력 가능\"\r\n                  value={sales_Contact}\r\n                  onChange={setValues}\r\n                  required={true}\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"sales_KakaoId\">카카오톡 ID</Label>\r\n              </td>\r\n              <td>\r\n                <Input\r\n                  name=\"sales_KakaoId\"\r\n                  value={sales_KakaoId}\r\n                  onChange={setValues}\r\n                  placeholder=\"카톡 아이디를 입력해 주세요\"\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"item_Price\">가격</Label>\r\n              </td>\r\n              <td>\r\n                <Input\r\n                  name=\"item_Price\"\r\n                  value={item_Price}\r\n                  placeholder=\"숫자만 입력 가능합니다\"\r\n                  onChange={setValues}\r\n                  required={true}\r\n                  type=\"text\"\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"item_Sort\">악기 분류</Label>\r\n              </td>\r\n              <td>\r\n                <Select\r\n                  value={[\"기타\", \"드럼\", \"베이스\", \"키보드\"]}\r\n                  onChange={setValues}\r\n                  name=\"item_Sort\"\r\n                ></Select>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"item_Image\" file={true}>\r\n                  이미지 업로드\r\n                </Label>\r\n              </td>\r\n              <td>\r\n                <div>\r\n                  <Input type=\"file\" name=\"item_Image\" onChange={getImage} />\r\n                </div>\r\n              </td>\r\n            </tr>\r\n            {uploadedImg.fileName ? (\r\n              <tr>\r\n                <td colSpan=\"2\" css={imageWrapper}>\r\n                  <img\r\n                    src={uploadedImg.filePath}\r\n                    alt=\"productImage\"\r\n                    width=\"100%\"\r\n                  />\r\n                </td>\r\n                <td></td>\r\n              </tr>\r\n            ) : null}\r\n          </tbody>\r\n        </table>\r\n        <textarea\r\n          name=\"item_Detail\"\r\n          value={item_Detail}\r\n          onChange={setValues}\r\n          placeholder=\"내용을 입력해 주세요\"\r\n        ></textarea>\r\n        <Button width=\"90%\" variation=\"outline\" type=\"submit\">\r\n          작성 하기\r\n        </Button>\r\n      </Form>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst WriteContainerWrapper = css`\r\n  width: 30rem;\r\n  padding: 2rem;\r\n  margin: 3rem auto;\r\n  border: 1px solid ${COLORS.primary};\r\n  border-radius: 1rem;\r\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.25);\r\n  &:hover {\r\n    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.7);\r\n    transition: 0.3s;\r\n  }\r\n`;\r\n\r\nconst imageWrapper = css`\r\n  width: 350px;\r\n  img {\r\n    margin-top: 1rem;\r\n  }\r\n`;\r\n\r\nexport default React.memo(WriteContainer);\r\n","/**@jsx jsx */\r\nimport { useState, useContext } from \"react\";\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { Input, Button, Form } from \"../components\";\r\nimport { fetchData } from \"../library\";\r\nimport { LoginContext } from \"../store\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Label } from \"../components/Label\";\r\n\r\nconst LoginContainer = () => {\r\n  const [loginInfo, setLoginInfo] = useState({\r\n    user_Id_FF: \"\",\r\n    user_Password_FF: \"\",\r\n  });\r\n\r\n  const { user_Id_FF, user_Password_FF } = loginInfo;\r\n\r\n  const { setLoginStatus } = useContext(LoginContext);\r\n\r\n  const getInputValue = (e) => {\r\n    const { name, value } = e.target;\r\n    setLoginInfo({ ...loginInfo, [name]: value });\r\n  };\r\n\r\n  const login = (e) => {\r\n    e.preventDefault();\r\n    const loginData = loginInfo;\r\n    fetchData({ method: \"POST\", url: \"/users/login\", data: loginData })\r\n      .then((res) => {\r\n        const { data } = res;\r\n        if (data.success) {\r\n          sessionStorage.setItem(\"user_Id\", data.user_Id);\r\n          sessionStorage.setItem(\"user_Name\", data.user_Name);\r\n          sessionStorage.setItem(\"admin\", data.admin);\r\n          sessionStorage.setItem(\"logon\", data.success);\r\n          setLoginStatus({\r\n            user_Id: data.user_Id,\r\n            user_Name: data.userName,\r\n            logon: data.success,\r\n            admin: data.admin,\r\n          });\r\n          alert(\"로그인에 성공했습니다.\");\r\n          return window.history.go(-1);\r\n        } else {\r\n          alert(data.msg);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        throw err;\r\n      });\r\n  };\r\n\r\n  return (\r\n    <section css={loginWrapper}>\r\n      <header>\r\n        <h1 style={{ fontSize: \"1.4rem\" }}>환영합니다.</h1>\r\n      </header>\r\n      <article>\r\n        <Form onSubmit={login}>\r\n          <table>\r\n            <tbody>\r\n              <tr>\r\n                <td>\r\n                  <Label htmlFor=\"user_Id_FF\">아이디</Label>\r\n                </td>\r\n                <td>\r\n                  <Input\r\n                    name=\"user_Id_FF\"\r\n                    value={user_Id_FF}\r\n                    onChange={getInputValue}\r\n                    placeholder=\"ID를 입력하세요\"\r\n                    required={true}\r\n                  ></Input>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  <Label htmlFor=\"user_Password_FF\">비밀번호</Label>\r\n                </td>\r\n                <td>\r\n                  <Input\r\n                    name=\"user_Password_FF\"\r\n                    value={user_Password_FF}\r\n                    type=\"password\"\r\n                    onChange={getInputValue}\r\n                    placeholder=\"PW를 입력하세요\"\r\n                    required={true}\r\n                  ></Input>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td colSpan=\"2\">\r\n                  <Button\r\n                    variation=\"outline\"\r\n                    color=\"teritiaty\"\r\n                    type=\"submit\"\r\n                    width=\"100%\"\r\n                  >\r\n                    로그인\r\n                  </Button>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td\r\n                  colSpan=\"2\"\r\n                  style={{\r\n                    fontSize: \"0.9rem\",\r\n                    color: \"#5a6a6a\",\r\n                    textAlign: \"right\",\r\n                    \"&:hover\": {\r\n                      color: \"black\",\r\n                    },\r\n                  }}\r\n                >\r\n                  <Link to=\"/signup\">회원이 아니신가요?</Link>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </Form>\r\n      </article>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst loginWrapper = css`\r\n  margin: 9rem auto;\r\n  width: 27rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border: 1px solid black;\r\n  border-radius: 0.2rem;\r\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.25);\r\n  a {\r\n    text-decoration: none;\r\n    color: inherit;\r\n  }\r\n  &:hover {\r\n    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.7);\r\n    transition: 0.3s;\r\n  }\r\n`;\r\n\r\nexport default LoginContainer;\r\n","/** @jsx jsx */\r\nimport { useState } from \"react\";\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { Button, Input, Form } from \"../components\";\r\nimport { COLORS } from \"../assets/colors\";\r\nimport { fetchData } from \"../library\";\r\nimport { Label } from \"../components/Label\";\r\n\r\nconst SignUpContainer = () => {\r\n  const [signUp, setSignUp] = useState({\r\n    user_Id: \"\",\r\n    user_Name: \"\",\r\n    user_Password: \"\",\r\n    user_Password_check: \"\",\r\n    user_Email: \"\",\r\n  });\r\n\r\n  const {\r\n    user_Id,\r\n    user_Name,\r\n    user_Password,\r\n    user_Password_check,\r\n    user_Email,\r\n  } = signUp;\r\n\r\n  const setValues = (e) => {\r\n    const { value, name } = e.target;\r\n    setSignUp({ ...signUp, [name]: value });\r\n  };\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    // 별명 2~12 자리 영문, 숫자, 한글\r\n    const nameCheck = /^[a-zA-Z0-9가-힣]{2,12}$/;\r\n\r\n    // 영문으로 시작하는 6자 이상 12자 이하문자열\r\n    const idCheck = /^[a-zA-Z]+[a-zA-Z0-9]{5,11}$/;\r\n\r\n    // 영문 & 숫자 조합 8~15자리\r\n    const pwdCheck = /^[a-zA-Z0-9]{8,15}$/;\r\n\r\n    // 이메일 체크\r\n    const eamilCheck = /^[a-zA-Z0-9]+@([a-z0-9-]+\\.)+[a-z0-9]{2,4}$/i;\r\n\r\n    if (!nameCheck.test(user_Name)) {\r\n      return alert(\"별명을 확인해 주세요!\");\r\n    }\r\n    if (!idCheck.test(user_Id)) {\r\n      return alert(\"아이디를 확인해 주세요!\");\r\n    }\r\n    if (!pwdCheck.test(user_Password)) {\r\n      return alert(\"비밀번호를 확인해 주세요!\");\r\n    }\r\n    if (user_Password !== user_Password_check)\r\n      return alert(\"비밀번호가 맞지 않습니다.\");\r\n    if (!eamilCheck.test(user_Email)) {\r\n      return alert(\"이메일을 확인해 주세요!\");\r\n    }\r\n\r\n    const data = signUp;\r\n\r\n    fetchData({ method: \"POST\", url: \"users/signup\", data }).then((res) => {\r\n      const { data } = res;\r\n      if (data) {\r\n        alert(\"회원 가입이 성공적으로 이루어졌습니다.\");\r\n        return (window.location.href = \"/\");\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <section css={WriteContainerWrapper}>\r\n      <Form onSubmit={onSubmit}>\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n              <td colSpan=\"2\" style={{ textAlign: \"center\" }}>\r\n                <h1>회원 가입</h1>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"user_Name\">별명</Label>\r\n              </td>\r\n              <td>\r\n                <Input\r\n                  name=\"user_Name\"\r\n                  autoFocus={true}\r\n                  placeholder=\"영문/숫자/한글 2~12자리\"\r\n                  value={user_Name}\r\n                  onChange={setValues}\r\n                  required={true}\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"user_Id\">아이디</Label>\r\n              </td>\r\n              <td>\r\n                <Input\r\n                  name=\"user_Id\"\r\n                  placeholder=\"영문으로 시작하는 6~12자리\"\r\n                  value={user_Id}\r\n                  onChange={setValues}\r\n                  required={true}\r\n                />\r\n              </td>\r\n            </tr>\r\n\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"user_Password\">비밀번호</Label>\r\n              </td>\r\n              <td>\r\n                <Input\r\n                  name=\"user_Password\"\r\n                  placeholder=\"영문/숫자 조합 8~15자리\"\r\n                  type=\"password\"\r\n                  value={user_Password}\r\n                  onChange={setValues}\r\n                  required={true}\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"user_Password\">비밀번호 확인</Label>\r\n              </td>\r\n              <td>\r\n                <Input\r\n                  name=\"user_Password_check\"\r\n                  placeholder=\"비밀번호를 확인해 주세요\"\r\n                  type=\"password\"\r\n                  value={user_Password_check}\r\n                  onChange={setValues}\r\n                  required={true}\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"user_Email\">이메일</Label>\r\n              </td>\r\n              <td>\r\n                <Input\r\n                  name=\"user_Email\"\r\n                  value={user_Email}\r\n                  onChange={setValues}\r\n                  placeholder=\"이메일을 입력해 주세요\"\r\n                  type=\"email\"\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td colSpan=\"2\">\r\n                <Button width=\"100%\" variation=\"outline\" type=\"submit\">\r\n                  작성하기\r\n                </Button>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </Form>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst WriteContainerWrapper = css`\r\n  width: 30rem;\r\n  padding: 2rem;\r\n  margin: 5rem auto;\r\n  border: 1px solid ${COLORS.primary};\r\n  border-radius: 1rem;\r\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.25);\r\n  &:hover {\r\n    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.7);\r\n    transition: 0.3s;\r\n  }\r\n`;\r\n\r\nexport default SignUpContainer;\r\n","import React, { useEffect, useContext, useState } from \"react\";\r\nimport { LoginContext } from \"../store\";\r\nimport { fetchData } from \"../library\";\r\nimport { UserTable } from \"../components\";\r\n\r\nconst MyPageContainer = () => {\r\n  const [userData, setUserData] = useState({\r\n    user_Id: \"\",\r\n    user_Password: \"\",\r\n    user_Email: \"\",\r\n    user_Name: \"\",\r\n  });\r\n  const { loginStatus } = useContext(LoginContext);\r\n\r\n  const { user_Id: user_Id_logon } = loginStatus;\r\n\r\n  useEffect(() => {\r\n    if (!sessionStorage.getItem(\"logon\")) {\r\n      alert(\"로그인이 필요합니다\");\r\n      return (window.location.href = \"/login\");\r\n    }\r\n    fetchData({\r\n      method: \"POST\",\r\n      data: { user_Id_logon },\r\n      url: \"/users/user\",\r\n    })\r\n      .then((res) => {\r\n        const { data } = res;\r\n        setUserData(data);\r\n      })\r\n      .catch((err) => {\r\n        throw err;\r\n      });\r\n  }, [setUserData, user_Id_logon]);\r\n  return <>{user_Id_logon && <UserTable userData={userData} />}</>;\r\n};\r\n\r\nexport default MyPageContainer;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { fetchData } from \"../library\";\r\nimport CardContainer from \"./CardContainer\";\r\nimport { Button, Loader } from \"../components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst MyPagePostsContainer = ({ user_Id }) => {\r\n  const [items, setItems] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetchData({\r\n      method: \"GET\",\r\n      url: `/users/myposts?id=${user_Id}`,\r\n    })\r\n      .then((res) => {\r\n        const { data } = res;\r\n        setItems((prevItems) => prevItems.concat(data));\r\n        setLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        throw err;\r\n      });\r\n  }, [user_Id]);\r\n\r\n  return (\r\n    <section\r\n      style={{\r\n        width: \"100%\",\r\n        flexWrap: \"wrap\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n      }}\r\n    >\r\n      <header\r\n        style={{\r\n          width: \"100%\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          margin: \"2rem\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <h1 style={{ width: \"100%\", textAlign: \"center\" }}>\r\n          최근 10개의 게시글만 표시됩니다.\r\n        </h1>\r\n      </header>\r\n      {loading ? <Loader /> : <CardContainer data={items} />}\r\n      <footer\r\n        style={{\r\n          width: \"100%\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          margin: \"2rem\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <Link to=\"/mypage\" style={{ textDecoration: \"none\", width: \"50%\" }}>\r\n          <Button width=\"100%\" color=\"secondary\" variation=\"outline\">\r\n            돌아가기\r\n          </Button>\r\n        </Link>\r\n      </footer>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default MyPagePostsContainer;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { useContext, useState, useEffect, Fragment } from \"react\";\r\nimport { LoginContext } from \"../store\";\r\nimport { Button, NoticeRow, Loader } from \"../components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { fetchData } from \"../library\";\r\n\r\nconst NoticeContainer = () => {\r\n  const [noticePosts, setNoticePosts] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [page, setPage] = useState(1);\r\n  const [pageArray, setPageArray] = useState([]);\r\n  const {\r\n    loginStatus: { admin },\r\n  } = useContext(LoginContext);\r\n\r\n  // 공지사항 목록 조회\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    fetchData({ method: \"GET\", url: `/notice?page=${page}` })\r\n      .then((res) => {\r\n        const { resArr, maxPage } = res.data;\r\n        setNoticePosts((prevPosts) => resArr);\r\n        setPageArray((prevPageArray) => maxPage);\r\n        setLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        throw err;\r\n      });\r\n  }, [page]);\r\n\r\n  // 공지사항 세부내용 조회\r\n\r\n  return (\r\n    <section>\r\n      {admin && (\r\n        <header css={headerStyle}>\r\n          <Link to=\"/notice/write\">\r\n            <Button color=\"warning\" size=\"big\">\r\n              공지사항 작성\r\n            </Button>\r\n          </Link>\r\n        </header>\r\n      )}\r\n      {!loading ? (\r\n        <Fragment>\r\n          <table style={{ width: \"100%\" }}>\r\n            <tbody>\r\n              {noticePosts.map((v, i) => (\r\n                <NoticeRow\r\n                  key={v.notice_Number}\r\n                  notice_Date={v.notice_Date}\r\n                  notice_Number={v.notice_Number}\r\n                  notice_Subject={v.notice_Subject}\r\n                  manager_Id={v.manager_Id}\r\n                  notice_Readcount={v.notice_Readcount}\r\n                  notice_Content={v.notice_Content}\r\n                  setNoticePosts={setNoticePosts}\r\n                  admin={admin}\r\n                />\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n          <footer css={footerStyle}>\r\n            {pageArray.map((v, i) => (\r\n              <Button\r\n                key={i}\r\n                variation=\"noborder\"\r\n                onClick={() => {\r\n                  setPage((prevPage) => v);\r\n                  window.scrollTo({ top: 0 });\r\n                }}\r\n              >\r\n                {v}\r\n              </Button>\r\n            ))}\r\n          </footer>\r\n        </Fragment>\r\n      ) : (\r\n        <Loader />\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nconst headerStyle = css`\r\n  margin: 3rem auto;\r\n  display: flex;\r\n  justify-content: center;\r\n  a {\r\n    text-decoration: none;\r\n  }\r\n`;\r\n\r\nconst footerStyle = css`\r\n  width: 100%;\r\n  margin: 1rem 0rem;\r\n  display: flex;\r\n\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport default NoticeContainer;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Input, Button, Form } from \"../components\";\r\nimport { COLORS } from \"../assets/colors\";\r\nimport { fetchData } from \"../library\";\r\n\r\nconst NoticeWriteContainer = ({ notice_Number }) => {\r\n  const [noticePost, setNoticePost] = useState({\r\n    notice_Number: Date.now(),\r\n    manager_Id: sessionStorage.getItem(\"user_Name\"),\r\n    notice_Subject: \"\",\r\n    notice_Content: \"\",\r\n    notice_Date: \"\",\r\n    notice_Readcount: 0,\r\n  });\r\n\r\n  const { notice_Subject, notice_Content } = noticePost;\r\n\r\n  useEffect(() => {\r\n    if (!sessionStorage.getItem(\"admin\")) {\r\n      alert(\"관리자만 조회 가능합니다.\");\r\n      return (window.location.href = \"/\");\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData({ method: \"GET\", url: `/notice/${notice_Number}` }).then(\r\n      (res) => {\r\n        setNoticePost((prevPost) => ({ ...res.data }));\r\n      }\r\n    );\r\n  }, [notice_Number]);\r\n\r\n  const setValues = (e) => {\r\n    const { name, value } = e.target;\r\n    setNoticePost((prevPost) => ({ ...prevPost, [name]: value }));\r\n  };\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (notice_Subject.trim().length === 0) {\r\n      return alert(\"제목은 한 글자 이상 입력해 주세요\");\r\n    }\r\n    if (notice_Content.trim().length === 0) {\r\n      return alert(\"내용은 한 글자 이상 입력해 주세요\");\r\n    }\r\n    const date = new Date();\r\n    fetchData({\r\n      method: \"POST\",\r\n      url: \"/notice\",\r\n      data: {\r\n        ...noticePost,\r\n        notice_Date: `${date.getFullYear()}-${date.getMonth()}-${date.getDate()} ${date\r\n          .toString()\r\n          .slice(16, 24)}`,\r\n      },\r\n    })\r\n      .then((res) => {\r\n        if (res.data) {\r\n          alert(\"공지사항을 작성했습니다.\");\r\n          return (window.location.href = \"/notice\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        throw err;\r\n      });\r\n  };\r\n  return (\r\n    <section css={WriteContainerWrapper}>\r\n      <Form onSubmit={onSubmit}>\r\n        <Input\r\n          width=\"87%\"\r\n          name=\"notice_Subject\"\r\n          value={notice_Subject}\r\n          placeholder=\"제목을 입력해 주세요.\"\r\n          onChange={setValues}\r\n          required\r\n        ></Input>\r\n        <textarea\r\n          name=\"notice_Content\"\r\n          value={notice_Content}\r\n          placeholder=\"내용을 입력해 주세요.\"\r\n          onChange={setValues}\r\n          required\r\n        ></textarea>\r\n        <Button type=\"sumbit\" width=\"90%\">\r\n          글 쓰기\r\n        </Button>\r\n      </Form>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst WriteContainerWrapper = css`\r\n  width: 30rem;\r\n  padding: 2rem;\r\n  margin: 3rem auto;\r\n  border: 1px solid ${COLORS.primary};\r\n  border-radius: 1rem;\r\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.25);\r\n  &:hover {\r\n    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.7);\r\n    transition: 0.3s;\r\n  }\r\n`;\r\n\r\nexport default NoticeWriteContainer;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Input, Button, Form } from \"../components\";\r\nimport { COLORS } from \"../assets/colors\";\r\nimport { fetchData } from \"../library\";\r\n\r\nconst NoticeUpdateContainer = ({ notice_Number }) => {\r\n  const [noticePost, setNoticePost] = useState({\r\n    notice_Number: \"\",\r\n    manager_Id: \"\",\r\n    notice_Subject: \"\",\r\n    notice_Content: \"\",\r\n    notice_Date: \"\",\r\n    notice_Readcount: 0,\r\n  });\r\n\r\n  const { notice_Subject, notice_Content } = noticePost;\r\n\r\n  useEffect(() => {\r\n    if (!sessionStorage.getItem(\"admin\")) {\r\n      alert(\"관리자만 조회 가능합니다.\");\r\n      return (window.location.href = \"/\");\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData({ method: \"GET\", url: `/notice/${notice_Number}` }).then(\r\n      (res) => {\r\n        setNoticePost((prevPost) => ({ ...res.data }));\r\n      }\r\n    );\r\n  }, [notice_Number]);\r\n\r\n  const setValues = (e) => {\r\n    const { name, value } = e.target;\r\n    setNoticePost((prevPost) => ({ ...prevPost, [name]: value }));\r\n  };\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    fetchData({\r\n      method: \"PUT\",\r\n      url: `/notice/${notice_Number}`,\r\n      data: {\r\n        ...noticePost,\r\n      },\r\n    })\r\n      .then((res) => {\r\n        if (res.data) {\r\n          alert(\"공지사항을 수정했습니다.\");\r\n          return (window.location.href = \"/notice\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        throw err;\r\n      });\r\n  };\r\n  return (\r\n    <section css={WriteContainerWrapper}>\r\n      <Form onSubmit={onSubmit}>\r\n        <Input\r\n          width=\"87%\"\r\n          name=\"notice_Subject\"\r\n          value={notice_Subject}\r\n          placeholder=\"제목을 입력해 주세요.\"\r\n          onChange={setValues}\r\n          required\r\n        ></Input>\r\n        <textarea\r\n          name=\"notice_Content\"\r\n          value={notice_Content}\r\n          placeholder=\"내용을 입력해 주세요.\"\r\n          onChange={setValues}\r\n          required\r\n        ></textarea>\r\n        <Button type=\"sumbit\" width=\"90%\">\r\n          글 쓰기\r\n        </Button>\r\n      </Form>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst WriteContainerWrapper = css`\r\n  width: 30rem;\r\n  padding: 2rem;\r\n  margin: 3rem auto;\r\n  border: 1px solid ${COLORS.primary};\r\n  border-radius: 1rem;\r\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.25);\r\n  &:hover {\r\n    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.7);\r\n    transition: 0.3s;\r\n  }\r\n`;\r\n\r\nexport default NoticeUpdateContainer;\r\n","import React from \"react\";\r\nimport { SalesReplyReadContainer, SalesReplyWriteContainer } from \".\";\r\n\r\nconst SalesReplyContainer = ({\r\n  item_Number,\r\n  item_Replies,\r\n  setItem_Replies,\r\n}) => {\r\n  return (\r\n    <section style={{ width: \"82%\" }}>\r\n      <SalesReplyWriteContainer\r\n        item_Number={item_Number}\r\n        setItem_Replies={setItem_Replies}\r\n      />\r\n      <SalesReplyReadContainer\r\n        item_Replies={item_Replies}\r\n        setItem_Replies={setItem_Replies}\r\n      />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default SalesReplyContainer;\r\n","import React from \"react\";\r\nimport { Reply } from \"../components\";\r\n\r\nconst SalesReplyReadContainer = ({ item_Replies, setItem_Replies }) => {\r\n  return (\r\n    <section>\r\n      {item_Replies\r\n        .sort((a, b) => b.item_Rnumber - a.item_Rnumber)\r\n        .map((reply) => (\r\n          <Reply\r\n            key={reply.item_Rnumber}\r\n            item_Detail={reply.item_Detail}\r\n            item_Number={reply.item_Number}\r\n            item_Reply_date={reply.item_Reply_date}\r\n            item_Reply_writer={reply.item_Reply_writer}\r\n            item_Rnumber={reply.item_Rnumber}\r\n            setItem_Replies={setItem_Replies}\r\n          />\r\n        ))}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default SalesReplyReadContainer;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { Button } from \"../components\";\r\nimport { useState } from \"react\";\r\nimport { fetchData } from \"../library\";\r\n\r\nconst SalesReplyWriteContainer = ({ item_Number, setItem_Replies }) => {\r\n  const [replyData, setReplyData] = useState({\r\n    item_Number,\r\n    item_Rnumber: 0,\r\n    item_Detail: \"\",\r\n    item_Reply_date: \"\",\r\n    item_Reply_writer: \"\",\r\n  });\r\n  const getValues = (e) => {\r\n    const { name, value } = e.target;\r\n    setReplyData({\r\n      ...replyData,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const writeReply = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!JSON.parse(sessionStorage.getItem(\"logon\"))) {\r\n      alert(\"로그인이 필요합니다.\");\r\n      return (window.location.href = \"/login\");\r\n    }\r\n\r\n    if (replyData.item_Detail.trim().length === 0) {\r\n      return alert(\"내용을 입력해 주세요.\");\r\n    }\r\n    const date = new Date();\r\n\r\n    const data = {\r\n      ...replyData,\r\n      item_Rnumber: Date.now(),\r\n      item_Reply_date: `${date.getFullYear()}-${date.getMonth()}-${date.getDate()} ${date\r\n        .toString()\r\n        .slice(16, 24)}`,\r\n      item_Reply_writer: sessionStorage.getItem(\"user_Name\"),\r\n    };\r\n    fetchData({\r\n      method: \"POST\",\r\n      url: \"/sales/write/reply\",\r\n      data,\r\n    })\r\n      .then((res) => {\r\n        if (res.data) {\r\n          setItem_Replies((prevReplies) => prevReplies.concat(data));\r\n          setReplyData({\r\n            item_Number: 0,\r\n            item_Rnumber: 0,\r\n            item_Detail: \"\",\r\n            item_Reply_date: \"\",\r\n            item_Reply_writer: \"\",\r\n          });\r\n          alert(\"댓글을 작성했습니다.\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        throw err;\r\n      });\r\n  };\r\n\r\n  return (\r\n    <section css={ReplyWriteWrapper}>\r\n      <form onSubmit={writeReply}>\r\n        <article>\r\n          <textarea\r\n            name=\"item_Detail\"\r\n            onChange={getValues}\r\n            placeholder=\"댓글을 입력해주세요\"\r\n            value={replyData.item_Detail}\r\n          ></textarea>\r\n          <div>\r\n            <Button\r\n              size=\"small\"\r\n              variation=\"outline\"\r\n              color=\"teritiaty\"\r\n              type=\"submit\"\r\n            >\r\n              댓글 작성\r\n            </Button>\r\n          </div>\r\n        </article>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst ReplyWriteWrapper = css`\r\n  width: 100%;\r\n  margin: 0 auto;\r\n  margin-bottom: 1rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  form {\r\n    width: 99%;\r\n  }\r\n  textarea {\r\n    width: 98.5%;\r\n    height: 4rem;\r\n    resize: none;\r\n  }\r\n  div {\r\n    width: 99%;\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    button {\r\n      font-size: 0.6rem;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default SalesReplyWriteContainer;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { ContactUs } from \"../components\";\r\nimport { useState } from \"react\";\r\n\r\nconst ContactContainer = () => {\r\n  const [contactInfo, setContactInfo] = useState({\r\n    user_name: \"\",\r\n    user_email: \"\",\r\n    message: \"\",\r\n  });\r\n  return (\r\n    <section css={ContactWrapper}>\r\n      <ContactUs contactInfo={contactInfo} setContactInfo={setContactInfo} />\r\n    </section>\r\n  );\r\n};\r\n\r\nconst ContactWrapper = css`\r\n  width: 70%;\r\n  padding: 2rem;\r\n  max-width: 40rem;\r\n  margin: 1rem auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.25);\r\n  &:hover {\r\n    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.7);\r\n    transition: 0.3s;\r\n  }\r\n`;\r\n\r\nexport default ContactContainer;\r\n","/**@jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { Input, Button } from \"../components\";\r\nimport { useState, useEffect, Fragment } from \"react\";\r\nimport { fetchData } from \"../library\";\r\n\r\nconst QnAWriteContainer = ({ qna, setQna }) => {\r\n  const [qnaData, setQnaData] = useState({\r\n    qna_Number: 0,\r\n    qna_Writer: \"\",\r\n    qna_Password: \"\",\r\n    qna_Subject: \"\",\r\n    qna_Content: \"\",\r\n    qna_Date: \"\",\r\n  });\r\n  const [haveSession, setHaveSession] = useState(false);\r\n  const [qna_Writer_Fixed, setQna_Writer_Fixed] = useState(\"\");\r\n\r\n  const { qna_Writer, qna_Password, qna_Subject, qna_Content } = qnaData;\r\n\r\n  const getValues = (e) => {\r\n    const { name, value } = e.target;\r\n    setQnaData((prevQna) => ({ ...prevQna, [name]: value }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const sessionName = sessionStorage.getItem(\"user_Name\");\r\n    if (sessionName) {\r\n      setQnaData((prevQna) => ({\r\n        ...prevQna,\r\n        qna_Writer: sessionName,\r\n      }));\r\n      setQna_Writer_Fixed(sessionName);\r\n      setHaveSession(true);\r\n    }\r\n  }, []);\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    // 게시글 비밀번호 체크\r\n    const pwdCheck = /^[0-9]{4,6}$/;\r\n\r\n    if (qna_Subject.trim().length === 0) {\r\n      return alert(\"제목은 한 글자 이상 입력해 주세요.\");\r\n    }\r\n    if (qna_Content.trim().length === 0) {\r\n      return alert(\"제목은 한 글자 이상 입력해 주세요.\");\r\n    }\r\n    if (!pwdCheck.test(qna_Password)) {\r\n      return alert(\"비밀번호는 4~6자리 숫자만 가능합니다.\");\r\n    }\r\n    if (qna_Writer.trim().length === 0) {\r\n      return alert(\"작성자를 입력해 주세요!\");\r\n    }\r\n\r\n    const date = new Date();\r\n    const data = {\r\n      ...qnaData,\r\n      qna_Number: Date.now(),\r\n      qna_Date: `${date.getFullYear()}-${date.getMonth()}-${date.getDate()} ${date\r\n        .toString()\r\n        .slice(16, 24)}`,\r\n    };\r\n    fetchData({\r\n      method: \"POST\",\r\n      url: \"qna\",\r\n      data,\r\n    })\r\n      .then((res) => {\r\n        if (res.data) {\r\n          setQna((prevQna) => [data].concat(prevQna));\r\n          setQnaData({\r\n            qna_Number: 0,\r\n            qna_Password: \"\",\r\n            qna_Subject: \"\",\r\n            qna_Content: \"\",\r\n            qna_Date: \"\",\r\n            qna_Writer: \"\",\r\n          });\r\n\r\n          const sessionName = sessionStorage.getItem(\"user_Name\");\r\n          if (sessionName) {\r\n            setQnaData((prevQna) => ({\r\n              ...prevQna,\r\n              qna_Writer: sessionName,\r\n            }));\r\n          }\r\n          alert(\"질문을 등록했습니다.\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        throw err;\r\n      });\r\n  };\r\n\r\n  return (\r\n    <section css={sectionWrapper}>\r\n      <h1>질문 등록하기</h1>\r\n      <form css={formStyle} onSubmit={onSubmit}>\r\n        <Input\r\n          width=\"100%\"\r\n          placeholder=\"제목을 입력하세요\"\r\n          name=\"qna_Subject\"\r\n          value={qna_Subject}\r\n          onChange={getValues}\r\n          autoFocus\r\n        />\r\n        <div>\r\n          <label htmlFor=\"qna_Writer\">닉네임</label>\r\n          {haveSession ? (\r\n            <span>{qna_Writer_Fixed}</span>\r\n          ) : (\r\n            <Fragment>\r\n              <Input\r\n                name=\"qna_Writer\"\r\n                value={qna_Writer}\r\n                placeholder=\"닉네임을 입력하세요.\"\r\n                onChange={getValues}\r\n              />\r\n            </Fragment>\r\n          )}\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"qna_Writer\">게시글 비밀번호</label>\r\n          <Input\r\n            name=\"qna_Password\"\r\n            value={qna_Password}\r\n            type=\"password\"\r\n            placeholder=\"4~6자리 숫자 입력\"\r\n            onChange={getValues}\r\n          />\r\n        </div>\r\n        <textarea\r\n          name=\"qna_Content\"\r\n          value={qna_Content}\r\n          onChange={getValues}\r\n          placeholder=\"질문하실 내용을 입력하세요.\"\r\n        ></textarea>\r\n        <Button\r\n          variation=\"outline\"\r\n          color=\"teritiaty\"\r\n          type=\"submit\"\r\n          width=\"100%\"\r\n        >\r\n          등록하기\r\n        </Button>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst sectionWrapper = css`\r\n  width: 70%;\r\n  min-width: 25rem;\r\n  padding: 2rem;\r\n  max-width: 40rem;\r\n  margin: 1rem auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.25);\r\n  &:hover {\r\n    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.7);\r\n    transition: 0.3s;\r\n  }\r\n  h1 {\r\n    font-size: 1.4rem;\r\n  }\r\n`;\r\n\r\nconst formStyle = css`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  textarea {\r\n    margin: 1rem;\r\n    width: 100%;\r\n    resize: none;\r\n    height: 10rem;\r\n  }\r\n  div {\r\n    width: 100%;\r\n    margin-top: 1rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n  }\r\n  div > label {\r\n    display: inline-block;\r\n    width: 12rem;\r\n    margin-right: 1rem;\r\n  }\r\n`;\r\nexport default QnAWriteContainer;\r\n","/**@jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { useEffect, useState, Fragment } from \"react\";\r\nimport { fetchData } from \"../library\";\r\nimport { Button, QnA, Loader } from \"../components\";\r\n\r\nconst QnAReadContainer = ({ qna, setQna }) => {\r\n  const [page, setPage] = useState(1);\r\n  const [totalPages, setTotalPages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    fetchData({ method: \"GET\", url: `/qna?page=${page}` })\r\n      .then((res) => {\r\n        if (res.data) {\r\n          const { resArr, maxPage } = res.data;\r\n          setQna((prevQna) => resArr);\r\n          const tmpTotalpages = [];\r\n          for (let i = 1; i <= maxPage; i++) {\r\n            tmpTotalpages.push(i);\r\n          }\r\n          setTotalPages((prevTotal) => tmpTotalpages);\r\n          setLoading(false);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        throw err;\r\n      });\r\n  }, [page, setQna]);\r\n\r\n  return (\r\n    <section css={sectionWrapper}>\r\n      <h1>등록된 질문</h1>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        <Fragment>\r\n          <article>\r\n            {qna.map((v) => (\r\n              <QnA\r\n                key={v.qna_Number}\r\n                qna_Number={v.qna_Number}\r\n                qna_Writer={v.qna_Writer}\r\n                qna_Password={v.qna_Password}\r\n                qna_Subject={v.qna_Subject}\r\n                qna_Content={v.qna_Content}\r\n                qna_Date={v.qna_Date}\r\n                setQna={setQna}\r\n              />\r\n            ))}\r\n          </article>\r\n          <footer css={footerStyle}>\r\n            {totalPages.map((page, i) => (\r\n              <Button\r\n                key={i}\r\n                onClick={() => setPage(i + 1)}\r\n                variation=\"noborder\"\r\n                color=\"secondary\"\r\n              >\r\n                {page}\r\n              </Button>\r\n            ))}\r\n          </footer>\r\n        </Fragment>\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nconst sectionWrapper = css`\r\n  width: 70%;\r\n  min-width: 25rem;\r\n  padding: 2rem;\r\n  max-width: 40rem;\r\n  margin: 1rem auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.25);\r\n  &:hover {\r\n    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.7);\r\n    transition: 0.3s;\r\n  }\r\n  h1 {\r\n    font-size: 1.4rem;\r\n  }\r\n  article {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst footerStyle = css`\r\n  margin: 0 auto;\r\n  width: 90%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  button {\r\n    margin-left: 0;\r\n  }\r\n`;\r\n\r\nexport default QnAReadContainer;\r\n","import React, { useState } from \"react\";\r\nimport QnAWriteContainer from \"./QnAWriteContainer\";\r\nimport QnAReadContainer from \"./QnAReadContainer\";\r\n\r\nconst QnAContainer = () => {\r\n  const [qna, setQna] = useState([]);\r\n  return (\r\n    <section>\r\n      <QnAWriteContainer qna={qna} setQna={setQna} />\r\n      <QnAReadContainer qna={qna} setQna={setQna} />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default QnAContainer;\r\n","import React, { useState } from \"react\";\r\nimport { QnAReplyReadContainer, QnAReplyWriteContainer } from \".\";\r\n\r\nconst QnAReplyContainer = ({ qna_Number, qna_Writer }) => {\r\n  const [qnaReplies, setQnaReplies] = useState([]);\r\n  return (\r\n    <>\r\n      <QnAReplyWriteContainer\r\n        qna_Number={qna_Number}\r\n        setQnaReplies={setQnaReplies}\r\n        qna_Writer={qna_Writer}\r\n      />\r\n      <QnAReplyReadContainer\r\n        qna_Number={qna_Number}\r\n        qna_Writer={qna_Writer}\r\n        qnaReplies={qnaReplies}\r\n        setQnaReplies={setQnaReplies}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QnAReplyContainer;\r\n","/**@jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { Button } from \"../components\";\r\nimport { useState } from \"react\";\r\nimport { fetchData } from \"../library\";\r\n\r\nconst QnAReplyWriteContainer = ({ qna_Number, qna_Writer, setQnaReplies }) => {\r\n  const [qnaReplyData, setQnaReplyData] = useState({\r\n    qna_Rnumber: Date.now(),\r\n    qna_Name: \"\",\r\n    qna_Detail: \"\",\r\n    qna_Number,\r\n    qna_Reply_date: \"\",\r\n  });\r\n\r\n  const { qna_Detail } = qnaReplyData;\r\n\r\n  const getTextValues = (e) => {\r\n    const { value } = e.target;\r\n    setQnaReplyData((prevData) => ({ ...prevData, qna_Detail: value }));\r\n  };\r\n\r\n  const writeReply = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (qna_Detail.trim().length === 0) {\r\n      return alert(\"내용을 입력해 주세요.\");\r\n    }\r\n\r\n    let qna_Name = qnaReplyData.qna_Name;\r\n    if (sessionStorage.getItem(\"user_Name\") === \"관리자\") {\r\n      qna_Name = \"관리자\";\r\n    } else {\r\n      qna_Name = qna_Writer;\r\n    }\r\n\r\n    const date = new Date();\r\n    const data = {\r\n      ...qnaReplyData,\r\n      qna_Name,\r\n      qna_Reply_date: `${date.getFullYear()}-${date.getMonth()}-${date.getDate()} ${date\r\n        .toString()\r\n        .slice(16, 24)}`,\r\n    };\r\n\r\n    fetchData({ method: \"POST\", url: `qna/${qna_Number}`, data })\r\n      .then((res) => {\r\n        if (res.data) {\r\n          setQnaReplies((prevReplies) => [data].concat(prevReplies));\r\n          alert(\"댓글을 작성했습니다.\");\r\n        } else {\r\n          alert(\"댓글을 작성할 수 없습니다.\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        throw err;\r\n      });\r\n  };\r\n\r\n  return (\r\n    <section css={QnAReplyWriteStyle}>\r\n      <form css={formStyle} onSubmit={writeReply}>\r\n        <textarea\r\n          name=\"qna_Detail\"\r\n          value={qna_Detail}\r\n          onChange={getTextValues}\r\n        ></textarea>\r\n        <Button\r\n          variation=\"noborder\"\r\n          size=\"small\"\r\n          type=\"submit\"\r\n          color=\"secondary\"\r\n        >\r\n          댓글 작성\r\n        </Button>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst QnAReplyWriteStyle = css`\r\n  padding: 1rem 0;\r\n`;\r\n\r\nconst formStyle = css`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  position: relative;\r\n  textarea {\r\n    width: 90%;\r\n    min-height: 4rem;\r\n    margin: 1rem auto;\r\n    resize: none;\r\n  }\r\n  button {\r\n    position: absolute;\r\n    bottom: -1.1rem;\r\n    right: 1.5rem;\r\n    font-size: 0.8rem;\r\n  }\r\n`;\r\n\r\nexport default QnAReplyWriteContainer;\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport { QnAReply, Loader } from \"../components\";\r\nimport { fetchData } from \"../library\";\r\n\r\nconst QnAReplyReadContainer = ({\r\n  qnaReplies,\r\n  setQnaReplies,\r\n  qna_Number,\r\n  qna_Writer,\r\n}) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const loaderRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const loaderCurrent = loaderRef.current;\r\n    const observer = new IntersectionObserver((entries) => {\r\n      entries.forEach((entry) => {\r\n        if (entry.isIntersecting) {\r\n          let timer;\r\n          if (!timer) {\r\n            timer = setTimeout(() => {\r\n              fetchData({ method: \"GET\", url: `/qna/${qna_Number}` })\r\n                .then((res) => {\r\n                  if (res.data) {\r\n                    const resArr = res.data;\r\n                    setQnaReplies((prevReplies) => prevReplies.concat(resArr));\r\n                    setLoading(false);\r\n                  }\r\n                })\r\n                .catch((err) => {\r\n                  throw err;\r\n                });\r\n            }, 500);\r\n          }\r\n        }\r\n      });\r\n    });\r\n    if (loaderCurrent) {\r\n      observer.observe(loaderCurrent);\r\n    }\r\n    return () => observer.unobserve(loaderCurrent);\r\n  }, [qna_Number, setQnaReplies]);\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <Loader loaderRef={loaderRef} />\r\n      ) : (\r\n        qnaReplies.map((reply) => (\r\n          <QnAReply\r\n            key={reply.qna_Rnumber}\r\n            qna_Rnumber={reply.qna_Rnumber}\r\n            qna_Detail={reply.qna_Detail}\r\n            qna_Reply_date={reply.qna_Reply_date}\r\n            qna_Name={reply.qna_Name}\r\n            qna_Writer={qna_Writer}\r\n            setQnaReplies={setQnaReplies}\r\n          />\r\n        ))\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QnAReplyReadContainer;\r\n","/**@jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { Button } from \"../Button\";\r\nimport { fetchData } from \"../../library\";\r\nimport { useState } from \"react\";\r\nimport { QnAReplyContainer } from \"../../containers\";\r\n\r\nconst QnADetail = ({\r\n  qna_Content,\r\n  qna_Number,\r\n  setQna,\r\n  qna_Writer,\r\n  qna_Password,\r\n  qna_Subject,\r\n  qna_Date,\r\n}) => {\r\n  const [updating, setUpdating] = useState(false);\r\n  const [newContent, setNewContent] = useState(qna_Content);\r\n  const [prevContent, setPrevContent] = useState(qna_Content);\r\n\r\n  const onUpdate = (e) => {\r\n    e.preventDefault();\r\n\r\n    const data = {\r\n      qna_Content: newContent,\r\n      qna_Number,\r\n      qna_Writer,\r\n      qna_Password,\r\n      qna_Subject,\r\n      qna_Date,\r\n    };\r\n\r\n    fetchData({ method: \"PUT\", url: `qna/${qna_Number}`, data })\r\n      .then((res) => {\r\n        if (res.data) {\r\n          setPrevContent(newContent);\r\n          setUpdating(false);\r\n          alert(\"댓글을 수정했습니다.\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        throw err;\r\n      });\r\n  };\r\n\r\n  const getInputValue = (e) => {\r\n    const { value } = e.target;\r\n    setNewContent(value);\r\n  };\r\n\r\n  const onRemove = () => {\r\n    if (window.confirm(\"정말로 삭제하시겠습니까?\"))\r\n      fetchData({\r\n        method: \"POST\",\r\n        url: `/qna/d/${qna_Number}`,\r\n        data: { qna_Number },\r\n      })\r\n        .then((res) => {\r\n          if (res.data) {\r\n            setQna((prevQna) =>\r\n              prevQna.filter((v) => v.qna_Number !== qna_Number)\r\n            );\r\n            alert(\"질문이 정상적으로 삭제되었습니다.\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          throw err;\r\n        });\r\n  };\r\n\r\n  return (\r\n    <article css={QnADetailStyle}>\r\n      {updating ? (\r\n        <form onSubmit={onUpdate} css={formStyle}>\r\n          <textarea\r\n            name=\"qna_Content\"\r\n            onChange={getInputValue}\r\n            value={newContent}\r\n          ></textarea>\r\n          <Button\r\n            variation=\"noborder\"\r\n            color=\"secondary\"\r\n            size=\"small\"\r\n            type=\"submit\"\r\n          >\r\n            수정 완료\r\n          </Button>\r\n        </form>\r\n      ) : (\r\n        <p css={pStyle}>{prevContent}</p>\r\n      )}\r\n      <footer css={buttonWrapper}>\r\n        <Button\r\n          onClick={() => {\r\n            setUpdating(!updating);\r\n          }}\r\n          size=\"small\"\r\n          variation=\"outline\"\r\n          color=\"teritiaty\"\r\n        >\r\n          {updating ? <span> 취소 </span> : <span>수정</span>}\r\n        </Button>\r\n        <Button\r\n          onClick={onRemove}\r\n          size=\"small\"\r\n          variation=\"outline\"\r\n          color=\"warning\"\r\n        >\r\n          삭제\r\n        </Button>\r\n      </footer>\r\n      <QnAReplyContainer qna_Number={qna_Number} qna_Writer={qna_Writer} />\r\n    </article>\r\n  );\r\n};\r\n\r\nconst QnADetailStyle = css`\r\n  width: 100%;\r\n  margin: 1rem auto;\r\n  padding-bottom: 1rem;\r\n`;\r\n\r\nconst pStyle = css`\r\n  width: 85%;\r\n  min-height: 5rem;\r\n  margin: 0 auto;\r\n  margin-bottom: 0.5rem;\r\n  padding: 1rem;\r\n  background: rgba(222, 222, 222, 0.6);\r\n  border: 1px solid #cdcdcd;\r\n`;\r\n\r\nconst formStyle = css`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  position: relative;\r\n  textarea {\r\n    width: 90%;\r\n    min-height: 5rem;\r\n    margin-bottom: 1rem;\r\n    resize: none;\r\n  }\r\n  button {\r\n    position: absolute;\r\n    right: 2rem;\r\n    bottom: 1.2rem;\r\n    font-size: 0.8rem;\r\n  }\r\n`;\r\n\r\nconst buttonWrapper = css`\r\n  width: 96%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n\r\n  button {\r\n    font-size: 1rem;\r\n    margin-right: 0.5rem;\r\n    & + button {\r\n      margin-left: 0;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default QnADetail;\r\n","/**@jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { Input } from \"../Input\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Button } from \"../Button\";\r\nimport { FaLock, FaUnlockAlt } from \"react-icons/fa\";\r\nimport { QnADetail } from \"../QnADetail\";\r\n\r\nconst QnA = ({\r\n  qna_Number,\r\n  qna_Writer,\r\n  qna_Password,\r\n  qna_Subject,\r\n  qna_Content,\r\n  qna_Date,\r\n  setQna,\r\n}) => {\r\n  const [unlocked, setUnlocked] = useState(false);\r\n  const [showInput, setShowInput] = useState(false);\r\n  const [password, setPassword] = useState(\"\");\r\n  const [admin, setAdmin] = useState(false);\r\n\r\n  const getPassword = (e) => {\r\n    const { value } = e.target;\r\n    setPassword(value);\r\n  };\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (password === qna_Password) {\r\n      setShowInput(false);\r\n      setUnlocked(true);\r\n    } else {\r\n      alert(\"비밀번호가 맞지 않습니다.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (sessionStorage.getItem(\"admin\")) {\r\n      setAdmin(JSON.parse(sessionStorage.getItem(\"admin\")));\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <section css={QnAWrapperStyle}>\r\n      <header css={headerStyle}>\r\n        <h3>{qna_Subject}</h3>\r\n        <div css={headerRightWrapper}>\r\n          {showInput ? (\r\n            <form onSubmit={onSubmit}>\r\n              <Input\r\n                type=\"password\"\r\n                name=\"password\"\r\n                value={password}\r\n                width=\"85%\"\r\n                onChange={getPassword}\r\n                onBlur={() => {\r\n                  setShowInput(false);\r\n                }}\r\n                placeholder=\"비밀번호 입력 후 Enter\"\r\n              />\r\n            </form>\r\n          ) : (\r\n            <div>\r\n              <span>{qna_Date}</span>\r\n              <span>{qna_Writer}</span>\r\n              {unlocked ? (\r\n                <Button variation=\"outline\" color=\"warning\" disabled>\r\n                  <FaUnlockAlt />\r\n                </Button>\r\n              ) : (\r\n                <Button\r\n                  variation=\"outline\"\r\n                  color=\"teritiaty\"\r\n                  onClick={() => {\r\n                    setShowInput(true);\r\n                  }}\r\n                >\r\n                  <FaLock />\r\n                </Button>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </header>\r\n\r\n      {admin ? (\r\n        <QnADetail\r\n          qna_Content={qna_Content}\r\n          setQna={setQna}\r\n          qna_Number={qna_Number}\r\n          qna_Writer={qna_Writer}\r\n          qna_Password={qna_Password}\r\n          qna_Subject={qna_Subject}\r\n          qna_Date={qna_Date}\r\n        />\r\n      ) : (\r\n        unlocked && (\r\n          <QnADetail\r\n            qna_Content={qna_Content}\r\n            setQna={setQna}\r\n            qna_Number={qna_Number}\r\n            qna_Writer={qna_Writer}\r\n            qna_Password={qna_Password}\r\n            qna_Subject={qna_Subject}\r\n            qna_Date={qna_Date}\r\n          />\r\n        )\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nconst QnAWrapperStyle = css`\r\n  margin: 1rem auto;\r\n  width: 100%;\r\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.25);\r\n  &:hover {\r\n    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.5);\r\n    transition: 0.3s;\r\n  }\r\n`;\r\n\r\nconst headerStyle = css`\r\n  box-sizing: border-box;\r\n  padding: 1rem;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  h3 {\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nconst headerRightWrapper = css`\r\n  width: 60%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n  div + span {\r\n    font-size: 0.1rem;\r\n  }\r\n  span:first-of-type {\r\n    padding-top: 0.4rem;\r\n    font-size: 0.8rem;\r\n  }\r\n  span {\r\n    text-align: right;\r\n    min-width: 3rem;\r\n    margin-right: 1rem;\r\n  }\r\n`;\r\nexport default QnA;\r\n","/**@jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { Button } from \"../Button\";\r\nimport { fetchData } from \"../../library\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst QnAReply = ({\r\n  qna_Name,\r\n  qna_Detail,\r\n  qna_Reply_date,\r\n  qna_Writer,\r\n  qna_Rnumber,\r\n  setQnaReplies,\r\n}) => {\r\n  const [admin, setAdmin] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (sessionStorage.getItem(\"admin\")) {\r\n      setAdmin(JSON.parse(sessionStorage.getItem(\"admin\")));\r\n    }\r\n  }, []);\r\n\r\n  const onRemove = () => {\r\n    if (window.confirm(\"정말로 삭제하시겠습니까?\"))\r\n      fetchData({ method: \"POST\", url: `/qna/reply/${qna_Rnumber}` })\r\n        .then((res) => {\r\n          if (res.data) {\r\n            console.log(res.data);\r\n            setQnaReplies((prevReplies) =>\r\n              prevReplies.filter((reply) => reply.qna_Rnumber !== qna_Rnumber)\r\n            );\r\n            alert(\"댓글을 삭제했습니다.\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          throw err;\r\n        });\r\n  };\r\n  return (\r\n    <section css={QnAReplyStyle}>\r\n      <article css={contentStyle}>\r\n        <h3 css={qna_Name === \"관리자\" && adminStyle}>{qna_Name}</h3>\r\n        <p>{qna_Detail}</p>\r\n      </article>\r\n      <footer css={footerStyle}>\r\n        <span>{qna_Reply_date}</span>\r\n        {admin ? (\r\n          <Button\r\n            variation=\"outline\"\r\n            onClick={onRemove}\r\n            size=\"small\"\r\n            color=\"warning\"\r\n          >\r\n            삭제\r\n          </Button>\r\n        ) : (\r\n          qna_Name === qna_Writer && (\r\n            <Button\r\n              variation=\"outline\"\r\n              onClick={onRemove}\r\n              size=\"small\"\r\n              color=\"warning\"\r\n            >\r\n              삭제\r\n            </Button>\r\n          )\r\n        )}\r\n      </footer>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst QnAReplyStyle = css`\r\n  width: 90%;\r\n  margin: 0 auto;\r\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.12);\r\n`;\r\n\r\nconst contentStyle = css`\r\n  h3 {\r\n    padding-top: 1rem;\r\n    width: 90%;\r\n    padding-bottom: 0.3rem;\r\n    margin-top: 0;\r\n    margin-left: 1rem;\r\n    border-bottom: 1px solid #dedede;\r\n  }\r\n  p {\r\n    margin-left: 1rem;\r\n    min-height: 4rem;\r\n  }\r\n`;\r\n\r\nconst adminStyle = css`\r\n  color: #40739e;\r\n`;\r\n\r\nconst footerStyle = css`\r\n  width: 95%;\r\n  margin: 0 auto;\r\n  margin-top: 0.5rem;\r\n  padding-bottom: 1rem;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n\r\n  span {\r\n    padding-top: 0.8rem;\r\n    display: block;\r\n    text-align: right;\r\n    font-size: 0.8rem;\r\n  }\r\n  button {\r\n    font-size: 0.9rem;\r\n  }\r\n  span + button {\r\n    margin-left: 0.8rem;\r\n  }\r\n`;\r\n\r\nexport default QnAReply;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { Button } from \"../Button\";\r\nimport { COLORS } from \"../../assets/colors\";\r\nimport { useContext } from \"react\";\r\nimport { LoginContext } from \"../../store\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { fetchData } from \"../../library\";\r\nimport { SalesReplyContainer } from \"../../containers\";\r\n\r\nconst Detail = (props) => {\r\n  const {\r\n    item_Number,\r\n    user_Id,\r\n    item_Writer,\r\n    item_Sort,\r\n    item_Price,\r\n    item_Detail,\r\n    sales_Contact,\r\n    sales_KakaoId,\r\n    deal_Location,\r\n    item_Name,\r\n    item_Picture,\r\n    item_Date,\r\n    item_Replies,\r\n    setItem_Replies,\r\n  } = props;\r\n\r\n  const { loginStatus } = useContext(LoginContext);\r\n\r\n  const onRemove = () => {\r\n    if (window.confirm(\"정말로 삭제하시겠습니까?\")) {\r\n      fetchData({\r\n        method: \"POST\",\r\n        url: \"/sales/detail/remove\",\r\n        data: { item_Number },\r\n      })\r\n        .then((res) => {\r\n          if (res.data === true) {\r\n            alert(\"글이 삭제되었습니다.\");\r\n            return (window.location.href = \"/sales\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          throw err;\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section css={detailWrapperStyle}>\r\n      <img src={item_Picture || \"/images/default.png\"} alt=\"상품 설명 사진\" />\r\n      <header css={headerStyle}>\r\n        <h1>{item_Name}</h1>\r\n      </header>\r\n      <table css={infoStyle}>\r\n        <tbody>\r\n          <tr>\r\n            <td>판매자</td>\r\n            <td>{item_Writer}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>판매자 연락처</td>\r\n            <td>{sales_Contact}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>카카오톡ID</td>\r\n            <td>{sales_KakaoId}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>악기 종류</td>\r\n            <td>{item_Sort}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>거래 위치</td>\r\n            <td>{deal_Location}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>가격</td>\r\n            <td>{item_Price}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>작성 시간</td>\r\n            <td>{item_Date}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n      <fieldset css={detailStyle}>\r\n        <legend>본문 내용</legend>\r\n        <p>{item_Detail}</p>\r\n      </fieldset>\r\n      <SalesReplyContainer\r\n        item_Number={item_Number}\r\n        item_Replies={item_Replies}\r\n        setItem_Replies={setItem_Replies}\r\n      />\r\n      <footer css={footerStyle}>\r\n        <Button onClick={() => window.history.go(-1)} variation=\"outline\">\r\n          돌아가기\r\n        </Button>\r\n        {loginStatus.user_Id === user_Id && (\r\n          <div>\r\n            <Link to={`/sales/detail/${item_Number}/update`}>\r\n              <Button variation=\"outline\" color=\"secondary\">\r\n                글 수정\r\n              </Button>\r\n            </Link>\r\n            <Button variation=\"outline\" color=\"warning\" onClick={onRemove}>\r\n              글 삭제\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </footer>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst detailWrapperStyle = css`\r\n  margin: 1rem auto;\r\n  padding-bottom: 1rem;\r\n  width: 50%;\r\n  min-width: 29rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.25);\r\n  color: ${COLORS.teritiaty};\r\n  img {\r\n    padding: 2rem;\r\n    width: 75%;\r\n    margin: 3rem;\r\n    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.25);\r\n  }\r\n  &:hover {\r\n    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.7);\r\n    transition: 0.3s;\r\n  }\r\n`;\r\n\r\nconst headerStyle = css`\r\n  width: 80%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0.1rem 0.3rem;\r\n  border: 1px solid ${COLORS.primary};\r\n  border-radius: 0.3rem;\r\n  margin-bottom: 1rem;\r\n  h1 {\r\n    padding: 0 1rem;\r\n  }\r\n`;\r\n\r\nconst infoStyle = css`\r\n  width: 82%;\r\n  max-width: 48.3rem;\r\n  margin-bottom: 1rem;\r\n  padding: 1rem 2rem;\r\n  border: 1px solid ${COLORS.primary};\r\n  border-radius: 0.3rem;\r\n  tr {\r\n    line-height: 2rem;\r\n  }\r\n`;\r\n\r\nconst detailStyle = css`\r\n  margin-bottom: 2rem;\r\n  width: 80%;\r\n  padding: 0.3rem;\r\n  border: 1px solid ${COLORS.primary};\r\n  border-radius: 0.3rem;\r\n  background: #fcfcfc;\r\n  p {\r\n    text-indent: 2rem;\r\n  }\r\n`;\r\n\r\nconst footerStyle = css`\r\n  margin-top: 1rem;\r\n  width: 82%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  a {\r\n    text-decoration: none;\r\n    margin-right: 1rem;\r\n  }\r\n`;\r\n\r\nexport default Detail;\r\n","/**@jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { Button } from \"../Button\";\r\nimport { Input } from \"../Input\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { fetchData } from \"../../library\";\r\n\r\nconst UserTable = ({ userData }) => {\r\n  const { user_Id, user_Password, user_Email, user_Name } = userData;\r\n\r\n  const onWithdrawal = () => {\r\n    if (window.confirm(\"정말로 탈퇴하시겠습니까?\")) {\r\n      fetchData({\r\n        method: \"POST\",\r\n        url: \"/users/withdrawal\",\r\n        data: { user_Id },\r\n      })\r\n        .then((res) => {\r\n          if (res.data) {\r\n            sessionStorage.removeItem(\"user_Id\");\r\n            sessionStorage.removeItem(\"user_Name\");\r\n            sessionStorage.removeItem(\"logon\");\r\n            sessionStorage.removeItem(\"admin\");\r\n            alert(\"정상적으로 탈퇴되었습니다.\");\r\n            return (window.location.href = \"/\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          throw err;\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section css={userTableWrapper}>\r\n      <table css={tableWrapper}>\r\n        <thead>\r\n          <tr>\r\n            <td colSpan=\"2\">내 정보</td>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>별명</td>\r\n            <td>\r\n              <Input value={user_Name} noborder />\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>아이디</td>\r\n            <td>{user_Id}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>비밀번호</td>\r\n            <td>\r\n              <Input value={user_Password} type=\"password\" noborder></Input>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>이메일</td>\r\n            <td>{user_Email}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n      <footer css={footerWrapper}>\r\n        <Link to={`/mypage/posts/${user_Id}`}>\r\n          <Button color=\"secondary\" variation=\"outline\" width=\"100%\">\r\n            내 글 보기\r\n          </Button>\r\n        </Link>\r\n        <Button\r\n          color=\"warning\"\r\n          variation=\"outline\"\r\n          width=\"100%\"\r\n          onClick={onWithdrawal}\r\n        >\r\n          회원탈퇴\r\n        </Button>\r\n      </footer>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst userTableWrapper = css`\r\n  width: 80%;\r\n  min-height: 60vh;\r\n  margin: 3rem auto;\r\n  padding: 1rem;\r\n  font-size: 1.4rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.25);\r\n  &:hover {\r\n    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.7);\r\n    transition: 0.3s;\r\n  }\r\n`;\r\n\r\nconst tableWrapper = css`\r\n  width: 100%;\r\n  margin-top: 1rem;\r\n  thead > tr > td {\r\n    padding-bottom: 2rem;\r\n    text-align: center;\r\n  }\r\n  input {\r\n    font-size: 1.2rem;\r\n  }\r\n`;\r\n\r\nconst footerWrapper = css`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  a {\r\n    width: 100%;\r\n    text-decoration: none;\r\n  }\r\n  a + button {\r\n    margin-top: 0.1rem;\r\n  }\r\n`;\r\n\r\nexport default UserTable;\r\n","import React from \"react\";\r\nimport { PageTemplate } from \"../components\";\r\nimport { SalesContainer } from \"../containers\";\r\n\r\nconst SalesPage = () => {\r\n  return (\r\n    <>\r\n      <PageTemplate>\r\n        <SalesContainer />\r\n      </PageTemplate>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SalesPage;\r\n","import React from \"react\";\r\nimport { PageTemplate } from \"../components\";\r\nimport { NoticeContainer } from \"../containers\";\r\n\r\nconst NoticePage = () => {\r\n  return (\r\n    <>\r\n      <PageTemplate>\r\n        <NoticeContainer />\r\n      </PageTemplate>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NoticePage;\r\n","import React from \"react\";\r\nimport { PageTemplate } from \"../components\";\r\nimport { NoticeWriteContainer, NoticeUpdateContainer } from \"../containers\";\r\n\r\nconst NoticeWritePage = ({ match }) => {\r\n  const notice_Number = match.params.id;\r\n  return (\r\n    <PageTemplate>\r\n      {notice_Number ? (\r\n        <NoticeUpdateContainer notice_Number={notice_Number} />\r\n      ) : (\r\n        <NoticeWriteContainer />\r\n      )}\r\n    </PageTemplate>\r\n  );\r\n};\r\n\r\nexport default NoticeWritePage;\r\n","import React from \"react\";\r\nimport { PageTemplate } from \"../components\";\r\nimport { QnAContainer } from \"../containers\";\r\n\r\nconst QnAPage = () => {\r\n  return (\r\n    <>\r\n      <PageTemplate>\r\n        <QnAContainer />\r\n      </PageTemplate>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QnAPage;\r\n","import React, { useContext } from \"react\";\r\nimport { PageTemplate } from \"../components\";\r\nimport { LoginContainer } from \"../containers\";\r\nimport { LoginContext } from \"../store\";\r\n\r\nconst LoginPage = () => {\r\n  const { loginStatus } = useContext(LoginContext);\r\n  return (\r\n    <section>\r\n      <PageTemplate>\r\n        {!loginStatus.logon ? <LoginContainer /> : <h1>로그인중</h1>}\r\n      </PageTemplate>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import React from \"react\";\r\nimport { PageTemplate } from \"../components\";\r\nimport { Fragment } from \"react\";\r\nimport { ContactContainer } from \"../containers\";\r\n\r\nconst ContactPage = () => {\r\n  return (\r\n    <Fragment>\r\n      <PageTemplate>\r\n        <ContactContainer />\r\n      </PageTemplate>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ContactPage;\r\n","import React from \"react\";\r\nimport { PageTemplate } from \"../components\";\r\nimport { DetailContainer } from \"../containers\";\r\n\r\nconst DetailPage = ({ match }) => {\r\n  const item_Id = match.params.id;\r\n  return (\r\n    <div>\r\n      <PageTemplate>\r\n        <DetailContainer item_Id={item_Id} />\r\n      </PageTemplate>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DetailPage;\r\n","import React from \"react\";\r\nimport { PageTemplate } from \"../components\";\r\nimport { WriteContainer } from \"../containers\";\r\n\r\nconst WritePage = () => {\r\n  return (\r\n    <>\r\n      <PageTemplate>\r\n        <WriteContainer />\r\n      </PageTemplate>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WritePage;\r\n","import React from \"react\";\r\nimport { PageTemplate } from \"../components\";\r\nimport { SignUpContainer } from \"../containers\";\r\n\r\nconst SingUpPage = () => {\r\n  return (\r\n    <PageTemplate>\r\n      <SignUpContainer />\r\n    </PageTemplate>\r\n  );\r\n};\r\n\r\nexport default SingUpPage;\r\n","/**@jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Input, Button, Form, Select } from \"../components\";\r\nimport { fetchData } from \"../library\";\r\nimport { COLORS } from \"../assets/colors\";\r\nimport { Label } from \"../components/Label\";\r\n\r\nconst ItemUpdateContainer = ({ item_Id }) => {\r\n  // 전송할 데이터를 상태로 관리\r\n  const [post, setPost] = useState({\r\n    item_Name: \"\",\r\n    deal_Location: \"\",\r\n    sales_KakaoId: \"\",\r\n    sales_Contact: \"\",\r\n    item_Price: \"\",\r\n    item_Sort: \"기타\",\r\n    item_Detail: \"\",\r\n    item_Picture: \"\",\r\n  });\r\n\r\n  // 업로드할 이미지 상태\r\n  const [uploadedImg, setUploadedImg] = useState({\r\n    fileName: \"\",\r\n    filePath: \"\",\r\n  });\r\n\r\n  // 수정할 데이터를 가져옴\r\n  useEffect(() => {\r\n    fetchData({\r\n      method: \"GET\",\r\n      url: `/sales/detail/item/${item_Id}`,\r\n    })\r\n      .then((res) => {\r\n        const { itemDetail } = res.data;\r\n        setPost((prevItem) => itemDetail);\r\n        setUploadedImg((prevImg) => ({\r\n          fileName: \"uploadedImg\",\r\n          filePath: itemDetail.item_Picture,\r\n        }));\r\n      })\r\n      .catch((err) => {\r\n        throw err;\r\n      });\r\n  }, [item_Id]);\r\n\r\n  // Input에 value로 연결할 값\r\n  const {\r\n    item_Name,\r\n    deal_Location,\r\n    sales_KakaoId,\r\n    sales_Contact,\r\n    item_Price,\r\n    item_Detail,\r\n  } = post;\r\n\r\n  // Input 값 가져오기\r\n  const setValues = (e) => {\r\n    const { value, name } = e.target;\r\n    setPost({ ...post, [name]: value });\r\n  };\r\n\r\n  // 이미지 파일 서버로 전송\r\n  const getImage = (e) => {\r\n    const imgFile = e.target.files[0];\r\n\r\n    const imgCheck = /\\.(jpg|png|gif|bmp)$/;\r\n    if (!imgCheck.test(imgFile.name)) {\r\n      return alert(\"이미지 파일이 아닙니다!\");\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"img\", imgFile);\r\n\r\n    fetchData({ method: \"POST\", data: formData, url: \"/sales/image\" }).then(\r\n      (res) => {\r\n        if (res) {\r\n          const { fileName } = res.data;\r\n          setUploadedImg({\r\n            fileName,\r\n            filePath: `/images/${fileName}`,\r\n          });\r\n          setPost({ ...post, item_Picture: `/images/${fileName}` });\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  // 데이터 전송\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    // 유효성 검사를 위한 정규식\r\n    // 주소: 공백을 포함한 한글\r\n    const locationCheck = /^[가-힣\\s]+$/;\r\n\r\n    // 연락처: 9~11자리 숫자만 입력 가능\r\n    const contactCheck = /^[0-9]{9,11}$/;\r\n\r\n    // 금액: 숫자만 입력 가능\r\n    const priceCheck = /^[0-9]+$/;\r\n\r\n    // 제목 체크\r\n    if (item_Name.trim().length === 0) {\r\n      return alert(\"제목은 1글자 이상 입력해 주세요!\");\r\n    }\r\n\r\n    // 주소는 한글만 입력\r\n    if (!locationCheck.test(deal_Location)) {\r\n      return alert(\"주소는 공백과 한글만 입력 가능합니다. \");\r\n    }\r\n    if (sales_KakaoId.trim().length === 0) {\r\n      return alert(\"카카오톡 ID를 입력해 주세요.\");\r\n    }\r\n    if (!contactCheck.test(sales_Contact)) {\r\n      return alert(\"연락처는 숫자만 입력 가능합니다.\");\r\n    }\r\n    if (!priceCheck.test(item_Price)) {\r\n      return alert(\"금액은 숫자만 입력 가능합니다.\");\r\n    }\r\n    if (item_Detail.trim().length === 0) {\r\n      return alert(\"내용을 입력해주세요\");\r\n    }\r\n\r\n    const user_Id = sessionStorage.getItem(\"user_Id\");\r\n    const user_Name = sessionStorage.getItem(\"user_Name\");\r\n    const data = post;\r\n\r\n    const date = new Date();\r\n\r\n    fetchData({\r\n      method: \"PUT\",\r\n      data: {\r\n        ...data,\r\n        user_Id,\r\n        item_Date: `${date.getFullYear()}-${date.getMonth()}-${date.getDate()} ${date\r\n          .toString()\r\n          .slice(16, 24)}`,\r\n        item_Writer: user_Name,\r\n      },\r\n      url: \"/sales/detail/update\",\r\n    }).then((res) => {\r\n      if (res.data) {\r\n        setPost({\r\n          item_Name: \"\",\r\n          deal_Location: \"\",\r\n          sales_KakaoId: \"\",\r\n          sales_Contact: \"\",\r\n          item_Price: \"\",\r\n          item_Sort: \"\",\r\n          item_Writer: \"\",\r\n          item_Detail: \"\",\r\n          item_Picture: \"\",\r\n        });\r\n        window.location.href = \"/sales\";\r\n        return alert(\"글이 성공적으로 수정되었습니다.\");\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <section css={WriteContainerWrapper}>\r\n      <Form onSubmit={onSubmit}>\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n              <td colSpan=\"2\">\r\n                <Input\r\n                  name=\"item_Name\"\r\n                  width=\"100%\"\r\n                  autoFocus={true}\r\n                  placeholder=\"제목을 입력해 주세요\"\r\n                  value={item_Name}\r\n                  onChange={setValues}\r\n                  required={true}\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"deal_Location\">거래 위치</Label>\r\n              </td>\r\n              <td>\r\n                <Input\r\n                  name=\"deal_Location\"\r\n                  placeholder=\"한글/공백 입력 가능\"\r\n                  value={deal_Location}\r\n                  onChange={setValues}\r\n                  required={true}\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"sales_Contact\">연락처</Label>\r\n              </td>\r\n              <td>\r\n                <Input\r\n                  name=\"sales_Contact\"\r\n                  placeholder=\"숫자만 입력 가능\"\r\n                  value={sales_Contact}\r\n                  onChange={setValues}\r\n                  required={true}\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"sales_KakaoId\">카카오톡 ID</Label>\r\n              </td>\r\n              <td>\r\n                <Input\r\n                  name=\"sales_KakaoId\"\r\n                  value={sales_KakaoId}\r\n                  onChange={setValues}\r\n                  placeholder=\"카톡 아이디를 입력해 주세요\"\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"item_Price\">가격</Label>\r\n              </td>\r\n              <td>\r\n                <Input\r\n                  name=\"item_Price\"\r\n                  value={item_Price}\r\n                  placeholder=\"숫자만 입력 가능\"\r\n                  onChange={setValues}\r\n                  required={true}\r\n                  type=\"text\"\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"item_Sort\">악기 분류</Label>\r\n              </td>\r\n              <td>\r\n                <Select\r\n                  value={[\"기타\", \"드럼\", \"베이스\", \"키보드\"]}\r\n                  onChange={setValues}\r\n                  name=\"item_Sort\"\r\n                ></Select>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <Label htmlFor=\"item_Image\" file={true}>\r\n                  이미지 업로드\r\n                </Label>\r\n              </td>\r\n              <td>\r\n                <div>\r\n                  <Input type=\"file\" name=\"item_Image\" onChange={getImage} />\r\n                </div>\r\n              </td>\r\n            </tr>\r\n            {uploadedImg.filePath ? (\r\n              <tr>\r\n                <td colSpan=\"2\" css={imageWrapper}>\r\n                  <img\r\n                    src={uploadedImg.filePath}\r\n                    alt=\"productImage\"\r\n                    width=\"100%\"\r\n                  />\r\n                </td>\r\n                <td></td>\r\n              </tr>\r\n            ) : null}\r\n          </tbody>\r\n        </table>\r\n        <textarea\r\n          name=\"item_Detail\"\r\n          value={item_Detail}\r\n          onChange={setValues}\r\n          placeholder=\"내용을 입력해 주세요\"\r\n        ></textarea>\r\n        <Button width=\"90%\" variation=\"outline\" type=\"submit\">\r\n          작성 하기\r\n        </Button>\r\n      </Form>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst WriteContainerWrapper = css`\r\n  width: 30rem;\r\n  padding: 2rem;\r\n  margin: 3rem auto;\r\n  border: 1px solid ${COLORS.primary};\r\n  border-radius: 1rem;\r\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.25);\r\n  &:hover {\r\n    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.7);\r\n    transition: 0.3s;\r\n  }\r\n`;\r\n\r\nconst imageWrapper = css`\r\n  width: 350px;\r\n  img {\r\n    margin-top: 1rem;\r\n  }\r\n`;\r\n\r\nexport default ItemUpdateContainer;\r\n","import React from \"react\";\r\nimport { PageTemplate } from \"../components\";\r\nimport ItemUpdateContainer from \"../containers/ItemUpdateContainer\";\r\n\r\nconst ItemUpdatePage = ({ match }) => {\r\n  const item_Id = match.params.id;\r\n  return (\r\n    <>\r\n      <PageTemplate>\r\n        <ItemUpdateContainer item_Id={item_Id} />\r\n      </PageTemplate>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ItemUpdatePage;\r\n","import React from \"react\";\r\nimport { PageTemplate } from \"../components\";\r\nimport { MyPageContainer } from \"../containers\";\r\n\r\nconst MyPage = () => {\r\n  return (\r\n    <>\r\n      <PageTemplate>\r\n        <MyPageContainer />\r\n      </PageTemplate>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MyPage;\r\n","import React from \"react\";\r\nimport { PageTemplate } from \"../components\";\r\nimport { MyPagePostsContainer } from \"../containers\";\r\n\r\nconst MyPagePosts = ({ match }) => {\r\n  const user_Id = match.params.user_Id;\r\n  return (\r\n    <PageTemplate>\r\n      <MyPagePostsContainer user_Id={user_Id} />\r\n    </PageTemplate>\r\n  );\r\n};\r\n\r\nexport default MyPagePosts;\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport { Global, css } from \"@emotion/core\";\r\nimport { LoginProvider } from \"./store\";\r\n\r\nimport {\r\n  MainPage,\r\n  SalesPage,\r\n  QnAPage,\r\n  MyPage,\r\n  LoginPage,\r\n  ContactPage,\r\n  DetailPage,\r\n  WritePage,\r\n  SignUpPage,\r\n  ItemUpdatePage,\r\n  MyPagePosts,\r\n  NoticePage,\r\n  NoticeWritePage,\r\n} from \"./pages\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      {/* 전체 스타일 지정 */}\r\n      <Global\r\n        styles={css`\r\n          body {\r\n            box-sizing: border-box;\r\n            margin: 0;\r\n            padding: 0;\r\n            font-family: \"Noto Sans\", \"Noto Sans KR\";\r\n          }\r\n        `}\r\n      />\r\n      <LoginProvider>\r\n        {/* ROUTE 설정 */}\r\n        <Route exact path=\"/\" component={SalesPage} />\r\n        <Switch>\r\n          <Route path=\"/sales/detail/:id/update\" component={ItemUpdatePage} />\r\n          <Route path=\"/sales/detail/:id\" component={DetailPage} />\r\n          <Route path=\"/sales/write\" component={WritePage} />\r\n          <Route path=\"/sales\" component={SalesPage} />\r\n        </Switch>\r\n        <Switch>\r\n          <Route path=\"/notice/update/:id\" component={NoticeWritePage} />\r\n          <Route path=\"/notice/write\" component={NoticeWritePage} />\r\n          <Route path=\"/notice\" component={NoticePage} />\r\n        </Switch>\r\n        <Route path=\"/qna\" component={QnAPage} />\r\n        <Switch>\r\n          <Route path=\"/mypage/posts/:user_Id\" component={MyPagePosts} />\r\n          <Route path=\"/mypage\" component={MyPage} />\r\n        </Switch>\r\n        <Route path=\"/login\" component={LoginPage} />\r\n        <Route path=\"/signup\" component={SignUpPage} />\r\n        <Route path=\"/contact\" component={ContactPage} />\r\n      </LoginProvider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import \"./index.css\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}